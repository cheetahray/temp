{
    "openapi": "3.0.2",
    "info": {
        "title": "Identity And Access Management",
        "description": "The CPN Identity and Access management APIs provide VMware Partners capabilities to create and/or perform role assignment for principals like users, enterprise groups and Oauth apps in Partner organizations ; and to generate access tokens for these principals using standard Oauth flows.",
        "contact": {
            "name": "VMware Inc"
        },
        "version": "1.0"
    },
    "servers": [
        {
            "url": ""
        }
    ],
    "security": [
        {
            "csp-auth-token": []
        }
    ],
    "tags": [
        {
            "name": "Auth Service Authentication API",
            "description": "APIs to manage and handle tokens."
        },
        {
            "name": "Auth Service Notifications API",
            "description": "Internal Resource to perform bulk operation on services, orgs and users."
        },
        {
            "name": "Auth Service Permission Enforcement API",
            "description": "Handles requests from other microservices to authorize access to their own resources."
        },
        {
            "name": "Auth services task monitoring API",
            "description": "Resource for monitoring role CRUD tasks."
        },
        {
            "name": "Auth-Token APIs",
            "description": "Resource to get different tokens."
        },
        {
            "name": "Authentication",
            "description": "Resource to manage and handle api-tokens and refresh-tokens to authenticate and make authorized API connections."
        },
        {
            "name": "CPHub Db Encryption API's",
            "description": "Internal resource to encrypt the db."
        },
        {
            "name": "Federation",
            "description": "Resource to manage and access federation operations."
        },
        {
            "name": "Principal User",
            "description": "Resource to get the logged in users details."
        },
        {
            "name": "Service Account APIs",
            "description": "Resource to manage INTERNAL/EXTERNAL Service Accounts."
        },
        {
            "name": "Service Organization",
            "description": "Resource for all org-based identity operations."
        },
        {
            "name": "User",
            "description": "Resource to manage and customize users access in the organization. Users are granted access to the organization and services when roles are assigned  to them."
        },
        {
            "name": "Organization Managed OAuth Apps",
            "description": "Resource to perform CRUD operation on Organization Managed OAuth Apps."
        },
        {
            "name": "Organization Managed OAuth Apps Client",
            "description": "Resource to perform CRUD operation on Organization Managed Clients."
        },
        {
            "name": "Login Flow APIs",
            "description": "Resource to manage differnet login flows. Used by CPN UI."
        },
        {
            "name": "Session APIs",
            "description": "Resource to perform session related operations."
        }
    ],
    "paths": {
        "/v1/authn/accesstoken": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Takes a refresh token as input and returns a new access token as the output",
                "description": "Takes a refresh token as input and returns a new access token as the output. In the request body, also pass the passcode if MFA is enabled.",
                "operationId": "accessToken",
                "requestBody": {
                    "description": "Request body to fetch access token",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InputRefreshToken"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationTokens"
                                },
                                "example": {
                                    "accessToken": "...",
                                    "idToken": "...",
                                    "refreshToken": "...",
                                    "returnUrl": "..."
                                }
                            }
                        }
                    }
                },
                "security": [],
                "x-codegen-request-body-name": "body"
            }
        },
        "/v1/federation/orgs/{orgId}/groups": {
            "get": {
                "tags": [
                    "Federation"
                ],
                "summary": "Get enterprise groups",
                "description": "Lists all enterprise groups in a specified Provider organization.",
                "operationId": "getOrganizationGroups",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "- Fetch the groups for the given Provider orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageLimit",
                        "in": "query",
                        "description": "- Maximum number of groups to return in\nresponse. Defaults to 100",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageStart",
                        "in": "query",
                        "description": "- Start index of records to fetch. Defaults to 1",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagedResponseGroupOrgAndServiceRolesForAuth"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Federation"
                ],
                "summary": "Assign Groups Roles On Organization",
                "description": "Assigns organization and service roles to a specified enterprise group within a Provider organization.",
                "operationId": "assignGroupsOnOrganization",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "- Provider organization selected for which the Group roles will be assigned",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "- Payload that captures Group role",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignGroupsToOrgAuthRequest"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssignGroupsToOrgAuthRequest"
                                },
                                "example": {
                                    "notifyUsersInGroups": true,
                                    "serviceRoles": [
                                        {
                                            "serviceDefinitionId": "...",
                                            "rolesToAdd": [
                                                {
                                                    "roleName": "...",
                                                    "name": "...",
                                                    "membershipType": "NESTED",
                                                    "resource": "..."
                                                },
                                                {
                                                    "roleName": "...",
                                                    "name": "...",
                                                    "membershipType": "NESTED",
                                                    "resource": "..."
                                                }
                                            ],
                                            "rolesToRemove": [
                                                {
                                                    "roleName": "...",
                                                    "name": "...",
                                                    "membershipType": "DIRECT",
                                                    "resource": "..."
                                                },
                                                {
                                                    "roleName": "...",
                                                    "name": "...",
                                                    "membershipType": "GROUP",
                                                    "resource": "..."
                                                }
                                            ]
                                        },
                                        {
                                            "serviceDefinitionId": "...",
                                            "rolesToAdd": [
                                                {
                                                    "roleName": "...",
                                                    "name": "...",
                                                    "membershipType": "DIRECT",
                                                    "resource": "..."
                                                },
                                                {
                                                    "roleName": "...",
                                                    "name": "...",
                                                    "membershipType": "NESTED",
                                                    "resource": "..."
                                                }
                                            ],
                                            "rolesToRemove": [
                                                {
                                                    "roleName": "...",
                                                    "name": "...",
                                                    "membershipType": "DIRECT",
                                                    "resource": "..."
                                                },
                                                {
                                                    "roleName": "...",
                                                    "name": "...",
                                                    "membershipType": "DIRECT",
                                                    "resource": "..."
                                                }
                                            ]
                                        }
                                    ],
                                    "organizationRoles": {
                                        "rolesToAdd": [
                                            {
                                                "roleName": "...",
                                                "name": "...",
                                                "membershipType": "NESTED",
                                                "resource": "..."
                                            },
                                            {
                                                "roleName": "...",
                                                "name": "...",
                                                "membershipType": "NESTED",
                                                "resource": "..."
                                            }
                                        ],
                                        "rolesToRemove": [
                                            {
                                                "roleName": "...",
                                                "name": "...",
                                                "membershipType": "GROUP",
                                                "resource": "..."
                                            },
                                            {
                                                "roleName": "...",
                                                "name": "...",
                                                "membershipType": "NESTED",
                                                "resource": "..."
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "Federation"
                ],
                "summary": "Removes the roles of a specified enterprise group in an Organization",
                "description": "Removes the roles of a specified enterprise group within a Provider organization and removes the group.",
                "operationId": "deleteGroupsOnOrg",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "- Provider organization selected for which the Group roles will be assigned",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "- Payload that captures Group role",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteGroupRolesRequest"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "204": {
                        "description": "Request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteGroupRolesRequest"
                                },
                                "example": {
                                    "ids": [
                                        "...",
                                        "..."
                                    ],
                                    "notifyUsersInGroups": true
                                }
                            }
                        }
                    }
                },
                "x-codegen-request-body-name": "body"
            }
        },
        "/v1/federation/orgs/{orgId}/groups/search": {
            "get": {
                "tags": [
                    "Federation"
                ],
                "summary": "Search federation groups",
                "description": "Searches for federation groups by name within a Provider organization. The search criteria is captured in the searchTerm parameter. Search results are paginated and returned as GroupDto object.",
                "operationId": "searchGroups",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageLimit",
                        "in": "query",
                        "description": "- Maximum number of groups to return in\nresponse. Defaults to 200",
                        "schema": {
                            "maximum": 200,
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageStart",
                        "in": "query",
                        "description": "- Start index of records to fetch. Defaults to 1",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "- This parameter is mandatory parameter, the results will be filtered based on the given\nstring value",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagedResponseGroups"
                                },
                                "example": {
                                    "groups": [
                                        {
                                            "displayName": "...",
                                            "usersCount": 12345,
                                            "domain": "...",
                                            "id": "..."
                                        },
                                        {
                                            "displayName": "...",
                                            "usersCount": 12345,
                                            "domain": "...",
                                            "id": "..."
                                        }
                                    ],
                                    "totalResults": 12345,
                                    "next": 12345,
                                    "results": [
                                        {},
                                        {}
                                    ],
                                    "current": 12345
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/federation/orgs/{orgId}/groups/{groupId}/groupusers": {
            "get": {
                "tags": [
                    "Federation"
                ],
                "summary": "Get all enterprise groups of the Identity Provider ID of the logged user",
                "description": "Returns a list of all enterprise groups of the Identity Provider ID of the logged user. This operation only works if the logged user account has the required roles assigned.",
                "operationId": "getUsersInGroup",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "- GroupId is used to fetch users that belong to the given group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "- Fetches users with the email, This is a optional parameter",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "firstName",
                        "in": "query",
                        "description": "- Fetches users with the firstName, This is a optional parameter",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lastName",
                        "in": "query",
                        "description": "- Fetches users with the lastName, This is a optional parameter",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageLimit",
                        "in": "query",
                        "description": "- Maximum number of groups to return in\nresponse. Defaults to 200",
                        "schema": {
                            "maximum": 200,
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageStart",
                        "in": "query",
                        "description": "- Start index of records to fetch. Defaults to 1",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagedResponseUsers"
                                },
                                "example": {
                                    "users": [
                                        {
                                            "company": "...",
                                            "domain": "...",
                                            "zipcode": "...",
                                            "internalId": "...",
                                            "address": "...",
                                            "website": "...",
                                            "accessible": true,
                                            "updatedByUserId": "...",
                                            "tradeId": "...",
                                            "username": "...",
                                            "lastName": "...",
                                            "emailVerified": "...",
                                            "createdByUserId": "...",
                                            "idpId": "...",
                                            "state": "...",
                                            "country": "...",
                                            "eulaInfo": "...",
                                            "email": "...",
                                            "id": "...",
                                            "city": "...",
                                            "firstName": "...",
                                            "workPhone": "...",
                                            "password": "...",
                                            "updateTimestamp": 12345,
                                            "createTimestamp": 12345
                                        },
                                        {
                                            "company": "...",
                                            "domain": "...",
                                            "zipcode": "...",
                                            "internalId": "...",
                                            "address": "...",
                                            "website": "...",
                                            "accessible": true,
                                            "updatedByUserId": "...",
                                            "tradeId": "...",
                                            "username": "...",
                                            "lastName": "...",
                                            "emailVerified": "...",
                                            "createdByUserId": "...",
                                            "idpId": "...",
                                            "state": "...",
                                            "country": "...",
                                            "eulaInfo": "...",
                                            "email": "...",
                                            "id": "...",
                                            "city": "...",
                                            "firstName": "...",
                                            "workPhone": "...",
                                            "password": "...",
                                            "updateTimestamp": 12345,
                                            "createTimestamp": 12345
                                        }
                                    ],
                                    "totalResults": 12345,
                                    "next": 12345,
                                    "results": [
                                        {},
                                        {}
                                    ],
                                    "current": 12345
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/federation/orgs/{orgId}/groups/{groupId}/org-roles/{roleId}/org-binding": {
            "get": {
                "tags": [
                    "Federation"
                ],
                "summary": "Get Org Bindings For Group",
                "description": "Retrieve org bindings for Group Within and heirarchy of provider organizations",
                "operationId": "getOrgBindingsForGroup",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "- GroupId is used to fetch users that belong to the given group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "roleId",
                        "in": "path",
                        "description": "Unique identifier of the role.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "description": "context can be OPERATOR, PROVIDER or TENANT.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "description": "",
                                    "items": {
                                        "$ref": "#/components/schemas/OrgForAuth"
                                    }
                                },
                                "example": [
                                    {
                                        "realm": "CPHUB",
                                        "inactive": true,
                                        "orgId": "...",
                                        "natures": [
                                            "ALL_NATURE",
                                            "ALL_NATURE"
                                        ],
                                        "parentOrgId": "...",
                                        "orgType": "PROVIDER",
                                        "updateTimestamp": 12345,
                                        "createTimestamp": 12345
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/v1/federation/orgs/{orgId}/groups/{groupId}/roles": {
            "get": {
                "tags": [
                    "Federation"
                ],
                "summary": "Get organization and service roles of a specified enterprise group",
                "description": "Lists the organization and service roles of a specified enterprise group within a Provider organization.",
                "operationId": "getGroupRolesOnOrganization",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "- GroupId for which the groups will be fetched, this parameter mandatory",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "- Provider orgId for which the roles will be fetched",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RolesDto",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrgAndServiceRolesForAuth"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Federation"
                ],
                "summary": "Update organization and service roles of a specified enterprise group",
                "description": "Updates the organization and service roles of a specified enterprise group within a Provider organization.",
                "operationId": "updateGroupRolesOnOrganization",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "- Group selected for which the roles will be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "- Provider organization selected for which the Group roles will be Updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "- Payload contains the roles to be added and deleted from the group",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateGroupRolesAuthRequest"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "204": {
                        "description": "Request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateGroupRolesAuthRequest"
                                },
                                "example": {
                                    "notifyUsersInGroups": true,
                                    "serviceRoles": [
                                        {
                                            "serviceDefinitionId": "...",
                                            "rolesToAdd": [
                                                {
                                                    "roleName": "...",
                                                    "name": "...",
                                                    "membershipType": "NESTED",
                                                    "resource": "..."
                                                },
                                                {
                                                    "roleName": "...",
                                                    "name": "...",
                                                    "membershipType": "NESTED",
                                                    "resource": "..."
                                                }
                                            ],
                                            "rolesToRemove": [
                                                {
                                                    "roleName": "...",
                                                    "name": "...",
                                                    "membershipType": "GROUP",
                                                    "resource": "..."
                                                },
                                                {
                                                    "roleName": "...",
                                                    "name": "...",
                                                    "membershipType": "NESTED",
                                                    "resource": "..."
                                                }
                                            ]
                                        },
                                        {
                                            "serviceDefinitionId": "...",
                                            "rolesToAdd": [
                                                {
                                                    "roleName": "...",
                                                    "name": "...",
                                                    "membershipType": "GROUP",
                                                    "resource": "..."
                                                },
                                                {
                                                    "roleName": "...",
                                                    "name": "...",
                                                    "membershipType": "GROUP",
                                                    "resource": "..."
                                                }
                                            ],
                                            "rolesToRemove": [
                                                {
                                                    "roleName": "...",
                                                    "name": "...",
                                                    "membershipType": "GROUP",
                                                    "resource": "..."
                                                },
                                                {
                                                    "roleName": "...",
                                                    "name": "...",
                                                    "membershipType": "NESTED",
                                                    "resource": "..."
                                                }
                                            ]
                                        }
                                    ],
                                    "organizationRoles": {
                                        "rolesToAdd": [
                                            {
                                                "roleName": "...",
                                                "name": "...",
                                                "membershipType": "DIRECT",
                                                "resource": "..."
                                            },
                                            {
                                                "roleName": "...",
                                                "name": "...",
                                                "membershipType": "NESTED",
                                                "resource": "..."
                                            }
                                        ],
                                        "rolesToRemove": [
                                            {
                                                "roleName": "...",
                                                "name": "...",
                                                "membershipType": "GROUP",
                                                "resource": "..."
                                            },
                                            {
                                                "roleName": "...",
                                                "name": "...",
                                                "membershipType": "DIRECT",
                                                "resource": "..."
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "x-codegen-request-body-name": "body"
            }
        },
        "/v1/federation/orgs/{orgId}/groups/{groupId}/users": {
            "get": {
                "tags": [
                    "Federation"
                ],
                "summary": "Get users in enterprise group",
                "description": "Lists all users in a specified enterprise group within a Provider organization.",
                "operationId": "getUsersInGroupWithinOrganization",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "- GroupId is used to fetch users that belong to the given group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "- Fetches users with the email, This is a optional parameter",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "firstName",
                        "in": "query",
                        "description": "- Fetches users with the firstName, This is a optional parameter",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lastName",
                        "in": "query",
                        "description": "- Fetches users with the lastName, This is a optional parameter",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageLimit",
                        "in": "query",
                        "description": "- Maximum number of groups to return in\nresponse. Defaults to 200",
                        "schema": {
                            "maximum": 200,
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageStart",
                        "in": "query",
                        "description": "- Start index of records to fetch. Defaults to 1",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagedResponseUsers"
                                },
                                "example": {
                                    "users": [
                                        {
                                            "company": "...",
                                            "domain": "...",
                                            "zipcode": "...",
                                            "internalId": "...",
                                            "address": "...",
                                            "website": "...",
                                            "accessible": true,
                                            "updatedByUserId": "...",
                                            "tradeId": "...",
                                            "username": "...",
                                            "lastName": "...",
                                            "emailVerified": "...",
                                            "createdByUserId": "...",
                                            "idpId": "...",
                                            "state": "...",
                                            "country": "...",
                                            "eulaInfo": "...",
                                            "email": "...",
                                            "id": "...",
                                            "city": "...",
                                            "firstName": "...",
                                            "workPhone": "...",
                                            "password": "...",
                                            "updateTimestamp": 12345,
                                            "createTimestamp": 12345
                                        },
                                        {
                                            "company": "...",
                                            "domain": "...",
                                            "zipcode": "...",
                                            "internalId": "...",
                                            "address": "...",
                                            "website": "...",
                                            "accessible": true,
                                            "updatedByUserId": "...",
                                            "tradeId": "...",
                                            "username": "...",
                                            "lastName": "...",
                                            "emailVerified": "...",
                                            "createdByUserId": "...",
                                            "idpId": "...",
                                            "state": "...",
                                            "country": "...",
                                            "eulaInfo": "...",
                                            "email": "...",
                                            "id": "...",
                                            "city": "...",
                                            "firstName": "...",
                                            "workPhone": "...",
                                            "password": "...",
                                            "updateTimestamp": 12345,
                                            "createTimestamp": 12345
                                        }
                                    ],
                                    "totalResults": 12345,
                                    "next": 12345,
                                    "results": [
                                        {},
                                        {}
                                    ],
                                    "current": 12345
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/federation/orgs/{orgId}/idp": {
            "get": {
                "tags": [
                    "Federation"
                ],
                "summary": "Get IDP of an organization",
                "description": "Returns the Identity Provider ID of a Provider organization.",
                "operationId": "getIdpId",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "domain",
                        "in": "query",
                        "description": "- get Idpid for the given domain, this parameter mandatory",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RolesDto",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "description": "RolesDto"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/loggedinuser": {
            "get": {
                "tags": [
                    "Principal User"
                ],
                "summary": "Get Principal User Information",
                "description": "Retrieves information about the logged user account.",
                "operationId": "getLoggedInUser",
                "parameters": [
                    {
                        "name": "expandUser",
                        "in": "query",
                        "description": "Indicates if the response should be expanded with the user profile.",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the logged in user details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoggedInUser"
                                },
                                "example": {
                                    "permissions": [
                                        "...",
                                        "..."
                                    ],
                                    "idToken": "...",
                                    "accessToken": "...",
                                    "roles": [
                                        "...",
                                        "..."
                                    ],
                                    "showOptionForUISwitch": true,
                                    "org": {
                                        "status": "DISABLED",
                                        "country": "...",
                                        "name": "...",
                                        "metaData": {
                                            "property1": "...",
                                            "property2": "..."
                                        },
                                        "createdByUserId": "...",
                                        "zip": "...",
                                        "spPrmId": "...",
                                        "natures": [
                                            "PARTNER",
                                            "OPS_STOP"
                                        ],
                                        "isFederated": true,
                                        "realm": "CPHUB",
                                        "id": "...",
                                        "tenantType": "DEFAULT",
                                        "providerStatus": "TRIAL",
                                        "addressLine2": "...",
                                        "primaryContact": {
                                            "username": "...",
                                            "email": "..."
                                        },
                                        "adminUserName": "...",
                                        "state": "...",
                                        "alternatePrimaryContact": {
                                            "username": "...",
                                            "email": "..."
                                        },
                                        "optOut": true,
                                        "providerType": "STANDARD",
                                        "aggregateContractIds": [
                                            "...",
                                            "..."
                                        ],
                                        "updatedByUserId": "...",
                                        "childOrgIds": [
                                            "...",
                                            "..."
                                        ],
                                        "addressLine1": "...",
                                        "configStatus": {
                                            "configResults": [
                                                {},
                                                {}
                                            ],
                                            "configState": "WARNING",
                                            "updateTimestamp": 12345,
                                            "createTimestamp": 12345
                                        },
                                        "description": "...",
                                        "companyName": "...",
                                        "partnerTypes": [
                                            "RESELLER",
                                            "DIRECT_RESELLER"
                                        ],
                                        "displayName": "...",
                                        "city": "...",
                                        "domain": "...",
                                        "seller": "VMWARE",
                                        "additionalMasterOrgIds": [
                                            "...",
                                            "..."
                                        ],
                                        "parentOrgId": "...",
                                        "adminUserEmail": "...",
                                        "tag": "...",
                                        "orgType": "PROVIDER",
                                        "updateTimestamp": 12345,
                                        "createTimestamp": 12345
                                    },
                                    "isNewUIPreferred": true,
                                    "vuiAccessToken": "...",
                                    "userLevel": "OPERATOR",
                                    "isFederated": true,
                                    "linkedUser": {
                                        "company": "...",
                                        "domain": "...",
                                        "zipcode": "...",
                                        "internalId": "...",
                                        "address": "...",
                                        "website": "...",
                                        "accessible": true,
                                        "updatedByUserId": "...",
                                        "tradeId": "...",
                                        "username": "...",
                                        "lastName": "...",
                                        "emailVerified": "...",
                                        "createdByUserId": "...",
                                        "idpId": "...",
                                        "state": "...",
                                        "country": "...",
                                        "eulaInfo": "...",
                                        "email": "...",
                                        "id": "...",
                                        "city": "...",
                                        "firstName": "...",
                                        "workPhone": "...",
                                        "password": "...",
                                        "updateTimestamp": 12345,
                                        "createTimestamp": 12345
                                    },
                                    "federated": true,
                                    "orgContext": "...",
                                    "company": "...",
                                    "domain": "...",
                                    "zipcode": "...",
                                    "internalId": "...",
                                    "address": "...",
                                    "website": "...",
                                    "accessible": true,
                                    "updatedByUserId": "...",
                                    "tradeId": "...",
                                    "username": "...",
                                    "lastName": "...",
                                    "emailVerified": "...",
                                    "createdByUserId": "...",
                                    "idpId": "...",
                                    "state": "...",
                                    "country": "...",
                                    "eulaInfo": "...",
                                    "email": "...",
                                    "id": "...",
                                    "city": "...",
                                    "firstName": "...",
                                    "workPhone": "...",
                                    "password": "...",
                                    "updateTimestamp": 12345,
                                    "createTimestamp": 12345
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/loggedinuser/orgs": {
            "get": {
                "tags": [
                    "Principal User"
                ],
                "summary": "Get Principal User Organizations",
                "description": "Lists all organizations of the logged user account.",
                "operationId": "getLoggedinUserOrgs",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "LoggedInUserOrgs",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoggedInUserOrgsDto"
                                },
                                "example": {
                                    "loggedInUserOrgs": [
                                        "...",
                                        "..."
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/loggedinuser/orgs/{orgId}/service-roles": {
            "get": {
                "tags": [
                    "Principal User"
                ],
                "summary": "Get Principal User Service Roles Within the Specified Organization",
                "description": "Lists all service roles of the logged user account within a specified organization.",
                "operationId": "getServiceRoles",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "description": "",
                                    "items": {
                                        "$ref": "#/components/schemas/ServiceRoles"
                                    }
                                },
                                "example": [
                                    {
                                        "resources": [
                                            {
                                                "id": "...",
                                                "name": "..."
                                            },
                                            {
                                                "id": "...",
                                                "name": "..."
                                            }
                                        ],
                                        "resourceTypes": [
                                            "...",
                                            "..."
                                        ],
                                        "serviceDisplayName": "...",
                                        "serviceId": "...",
                                        "roles": [
                                            {
                                                "status": "...",
                                                "mspDefaultRoleOfProviderAtTenant": true,
                                                "displayName": "...",
                                                "hidden": true,
                                                "name": "...",
                                                "roleId": "...",
                                                "enabled": true,
                                                "associatedResources": [
                                                    "...",
                                                    "..."
                                                ],
                                                "defaultRole": true,
                                                "mspDefaultRole": true,
                                                "resource": "...",
                                                "memberType": "GROUP"
                                            },
                                            {
                                                "status": "...",
                                                "mspDefaultRoleOfProviderAtTenant": true,
                                                "displayName": "...",
                                                "hidden": true,
                                                "name": "...",
                                                "roleId": "...",
                                                "enabled": true,
                                                "associatedResources": [
                                                    "...",
                                                    "..."
                                                ],
                                                "defaultRole": true,
                                                "mspDefaultRole": true,
                                                "resource": "...",
                                                "memberType": "DIRECT"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/v1/orgs/roles": {
            "get": {
                "tags": [
                    "Service Organization"
                ],
                "summary": "Get all available roles for all organization types",
                "description": "Returns all available roles for all organization types with the permissions attached to each role.",
                "operationId": "getRoles",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "description": "",
                                    "items": {
                                        "$ref": "#/components/schemas/RoleDefinition"
                                    }
                                },
                                "example": [
                                    {
                                        "description": "...",
                                        "creatorOrg": "...",
                                        "nature": "DISTRIBUTOR",
                                        "realm": "CPATH",
                                        "id": "...",
                                        "name": "...",
                                        "orgType": "TENANT",
                                        "orgPermissions": {
                                            "property1": [
                                                "...",
                                                "..."
                                            ],
                                            "property2": [
                                                "...",
                                                "..."
                                            ]
                                        },
                                        "roleInheritance": "MANUAL",
                                        "updateTimestamp": 12345,
                                        "createTimestamp": 12345
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/v2/orgs/{orgId}/add-users": {
            "post": {
                "tags": [
                    "Service Organization"
                ],
                "summary": "Add  users to an Organization",
                "description": "Adds new users to a Provider organization and assigns service and organization roles to their accounts. If a user has previously set up VMware ID with their email, they are immediately added to your organization. If a user does not have VMware ID set up, they receive an invitation to create a VMware ID and join your organization.",
                "operationId": "addUsers",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "description": "context can be OPERATOR, PROVIDER or TENANT.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request body to add users in an organization",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddUserRequest"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddUserGenericResponse"
                                }
                            }
                        }
                    },
                    "207": {
                        "description": "Multi-Status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddUserGenericResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - The request is either incomplete or incorrect",
                        "content": {}
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API",
                        "content": {}
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "body"
            }
        },
        "/v1/orgs/{orgId}/invitations": {
            "get": {
                "tags": [
                    "Service Organization"
                ],
                "summary": "Get All user invitations",
                "description": "Retrieves information about multiple user invitations in a Provider organization.",
                "operationId": "getUsersInvitation",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "description": "Ok",
                                    "items": {
                                        "$ref": "#/components/schemas/GetUserInvitation"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API",
                        "content": {}
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": [
                    "Service Organization"
                ],
                "summary": "Delete user invitation",
                "description": "Revokes an email invitation sent to a user.",
                "operationId": "revokeUserInvitation",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Defines the request body to revoke email invitations sent.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserInvitationEmailsDto"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddUserGenericResponse"
                                }
                            }
                        }
                    },
                    "207": {
                        "description": "Multi-Status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddUserGenericResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - The request is either incomplete or incorrect",
                        "content": {}
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API",
                        "content": {}
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "body"
            }
        },
        "/v1/orgs/{orgId}/invitations/resend-email": {
            "post": {
                "tags": [
                    "Service Organization"
                ],
                "summary": "Resend invitation to user",
                "description": "Resends an invitation by email to a user in a Provider organization.",
                "operationId": "resendUserInvitation",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request body to resend a user invitation",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserInvitationEmailsDto"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddUserGenericResponse"
                                }
                            }
                        }
                    },
                    "207": {
                        "description": "Multi-Status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddUserGenericResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - The request is either incomplete or incorrect",
                        "content": {}
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API",
                        "content": {}
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "body"
            }
        },
        "/v1/orgs/{orgId}/invitations/{userInvitationId}": {
            "get": {
                "tags": [
                    "Service Organization"
                ],
                "summary": "Get user invitation details",
                "description": "Retrieves information about a user invitation within a Provider\norganization.",
                "operationId": "getUserInvitation",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userInvitationId",
                        "in": "path",
                        "description": "Unique identifier of the user invitation.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserInvitation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API",
                        "content": {}
                    },
                    "404": {
                        "description": "Not Found - The requested resource does not exist",
                        "content": {}
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request",
                        "content": {}
                    }
                }
            }
        },
        "/v1/orgs/{orgId}/org-roles": {
            "get": {
                "tags": [
                    "Service Organization"
                ],
                "summary": "Get all organization roles",
                "description": "Lists all organization roles available to users in your organization.",
                "operationId": "getAvailableOrgRoles",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "description": "context can be OPERATOR, PROVIDER or TENANT",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrgRoles"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API",
                        "content": {}
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request",
                        "content": {}
                    }
                }
            }
        },
        "/v1/orgs/{orgId}/users": {
            "get": {
                "tags": [
                    "Service Organization"
                ],
                "summary": "Get all users in organization",
                "description": "Lists all users in a Provider organization with information about their user accounts and roles.",
                "operationId": "getOrgUsers",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "description": "context can be OPERATOR, PROVIDER or TENANT",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "roleId",
                        "in": "query",
                        "description": "Unique identifier of the role.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "description": "Ok",
                                    "items": {
                                        "$ref": "#/components/schemas/UserOrgAndServiceRolesForAuth"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API",
                        "content": {}
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": [
                    "Service Organization"
                ],
                "summary": "Delete users for Organization",
                "description": "Removes users from your Provider organization and revokes their access.",
                "operationId": "deleteOrgUsers",
                "parameters": [
                    {
                        "name": "context",
                        "in": "query",
                        "description": "context can be OPERATOR, PROVIDER or TENANT",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Remove users from organization request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Users"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GenericUserResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API"
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation"
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request"
                    }
                }
            },
            "parameters": [
                {
                    "name": "orgId",
                    "in": "path",
                    "description": "Unique identifier (GUID) of the Provider organization.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/v1/orgs/{orgId}/users-org-role-bindings": {
            "patch": {
                "tags": [
                    "Service Organization"
                ],
                "summary": "Updates organization role bindings for multiple users",
                "description": "Updates the organization role bindings of multiple users in a Provider organization.",
                "operationId": "updateOrgRoleBindingsForMultipleUsers",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "description": "context can be OPERATOR, PROVIDER or TENANT.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The request body to update organization role bindings",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserOrgRoleBindingItems"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserOrgRoleBindingItems"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - The request is either incomplete or incorrect",
                        "content": {}
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API",
                        "content": {}
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "userOrgRoleBindingItems"
            }
        },
        "/v1/orgs/{orgId}/users-org-roles": {
            "patch": {
                "tags": [
                    "Service Organization"
                ],
                "summary": "Update Organization roles for multiple users",
                "description": "Updates the organization roles of multiple users in a Provider organization.",
                "operationId": "updateOrgRolesForMultipleUsers",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "description": "context can be OPERATOR, PROVIDER or TENANT",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request body to update organization roles of multiple users",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserOrgRoleItemsRemoveV2"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserOrgRoleItemsRemoveV2"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API",
                        "content": {}
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation",
                        "content": {}
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "body"
            }
        },
        "/v1/orgs/{orgId}/users-service-roles": {
            "patch": {
                "tags": [
                    "Service Organization"
                ],
                "summary": "Update service roles for multiple users in an organization",
                "description": "Updates the service roles of users in a Provider organization.",
                "operationId": "updateServiceRolesForMultipleUsers",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "description": "context can be OPERATOR, PROVIDER or TENANT.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request body to update service roles of users in an organization",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserServiceRolesItemForAuth"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "description": "Ok",
                                    "items": {
                                        "$ref": "#/components/schemas/UserServiceRolesForAuth"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API",
                        "content": {}
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "body"
            }
        },
        "/v1/users/calling-user": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get information about the user account performing the API call.",
                "description": "Retrieves information about the user account performing the API call.",
                "operationId": "getCallingUser",
                "parameters": [
                    {
                        "name": "expandUser",
                        "in": "query",
                        "description": "Indicates if the response should be expanded with the user profile",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallingUser"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API",
                        "content": {}
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request",
                        "content": {}
                    }
                }
            }
        },
        "/v1/users/existence/{userId}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Checks if user exists in CPN",
                "description": "Checks if a specified user exists in Cloud Partner Navigator without disclosing additional information about them.",
                "operationId": "checkUserExistence",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The userId or user account identifier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "- response with code 200 OK and body = true when the user exists otherwise returns the corresponding\nerror details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean",
                                    "description": "- response with code 200 OK and body = true when the user exists otherwise returns the corresponding\nerror details."
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/{userId}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get User",
                "description": "Retrieves information about a user by username.",
                "operationId": "getUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The userId or user account identifier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API",
                        "content": {}
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request",
                        "content": {}
                    }
                }
            }
        },
        "/v1/users/{userId}/orgs/{orgId}/org-roles": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get assigned organization roles of user in an Organization",
                "description": "Lists the assigned organization roles of a user in a Provider organization.",
                "operationId": "getOrgRoles",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The userId or user account identifier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "description": "context can be OPERATOR, PROVIDER or TENANT.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrgRoles"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API",
                        "content": {}
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": [
                    "User"
                ],
                "summary": "Updates the organization roles of a user in an organization",
                "description": "Updates the organization roles of a particular user in a Provider organization.",
                "operationId": "updateOrgRoles",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The userId or user account identifier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "description": "context can be OPERATOR, PROVIDER or TENANT",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request body to update the organization roles of a particular user in an organization.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrgRoleItems"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrgRoles"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API",
                        "content": {}
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation",
                        "content": {}
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "body"
            }
        },
        "/v1/users/{userId}/orgs/{orgId}/org-roles-with-binding": {
            "patch": {
                "tags": [
                    "User"
                ],
                "summary": "Update organization roles with organization bindings for a user in an organization",
                "description": "Update org roles with org bindings for a user in a Provider organization",
                "operationId": "updateOrgRolesWithBinding",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The userId or user account identifier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "description": "context can be OPERATOR, PROVIDER or TENANT.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request body to update org roles with org bindings for a user in an organization",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrgRoleItemsV2"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrgRoles"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API",
                        "content": {}
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation",
                        "content": {}
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "body"
            }
        },
        "/v1/users/{userId}/orgs/{orgId}/org-roles/{roleId}/org-bindings": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get Organization Bindings For Role",
                "description": "Retrieves the organization bindings of a user of a particular role within a Provider organization.",
                "operationId": "getOrgBindingsForRole",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "roleId",
                        "in": "path",
                        "description": "Unique identifier of the role.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The userId or user account identifier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "description": "context can be OPERATOR , PROVIDER or TENANT",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "description": "Ok",
                                    "items": {
                                        "$ref": "#/components/schemas/OrgForAuth"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API",
                        "content": {}
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": [
                    "User"
                ],
                "summary": "Updates the organization role bindings of a user in an organization",
                "description": "Updates the organization role bindings of a particular user in a Provider organization.",
                "operationId": "updateOrgBindingsForRole",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "roleId",
                        "in": "path",
                        "description": "Unique identifier of the role.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The userId or user account identifier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "description": "context can be OPERATOR, PROVIDER or TENANT",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request body to update the organization role bindings of a particular user",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrgItems"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "description": "Ok",
                                    "items": {
                                        "$ref": "#/components/schemas/OrgForAuth"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - The request is either incomplete or incorrect",
                        "content": {}
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API",
                        "content": {}
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "body"
            }
        },
        "/v1/users/{userId}/orgs/{orgId}/service-roles": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get User Organization Service Roles",
                "description": "Lists the assigned service roles of a user in a Provider orgnization.",
                "operationId": "getServiceRoles2",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The userId or user account identifier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "description": "context can be OPERATOR, PROVIDER or TENANT",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "description": "Ok",
                                    "items": {
                                        "$ref": "#/components/schemas/ServiceRoles"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API",
                        "content": {}
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": [
                    "User"
                ],
                "summary": "Updates the service roles of a user in an organization",
                "description": "Updates the service roles of a particular user in a Provider organization.",
                "operationId": "updateServiceRoles",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The userId or user account identifier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "description": "context can be OPERATOR, PROVIDER or TENANT",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request body to update service roles of a particular user in an organization",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRolesItemsForAuth"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "description": "Ok",
                                    "items": {
                                        "$ref": "#/components/schemas/ServiceRoles"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API",
                        "content": {}
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "body"
            }
        },
        "/v1/users/{userId}/orgs/{orgId}/redeem": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Redeem User Invitation",
                "description": "Redeems the user invitation of a user in a Provider organization. ",
                "operationId": "redeemUserInvitation",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "parameters": [
                {
                    "name": "userId",
                    "in": "path",
                    "description": "The userId or user account identifier.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "orgId",
                    "in": "path",
                    "description": "Unique identifier (GUID) of the Provider organization.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/v2/orgs/{orgId}/oauth-apps": {
            "get": {
                "tags": [
                    "Organization Managed OAuth Apps"
                ],
                "summary": "Get Organization Managed Oauth Apps",
                "description": "Lists all OAuth apps in a given Provider organization.",
                "operationId": "get-orgId-oauth-apps",
                "parameters": [
                    {
                        "name": "pageStart",
                        "in": "query",
                        "description": "Start index of records to fetch. Defaults to 1.",
                        "schema": {
                            "minimum": 0,
                            "type": "string",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageLimit",
                        "in": "query",
                        "description": "Maximum number of Apps to return in response. Defaults to 200.",
                        "schema": {
                            "maximum": 200,
                            "type": "string",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "A search term to be used to filter OAuth apps by either display name or client id.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagedResponseCpnOrgOauthApps"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API"
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Organization Managed OAuth Apps"
                ],
                "summary": "Create Organization Managed Oauth App",
                "description": "Creates a new OAuth App, owned by the specified Provider organization. If Client ID and Client Secret are not provided, they will be generated automatically.",
                "operationId": "createOrganizationOAuthApplicationByOrganizationId",
                "parameters": [
                    {
                        "name": "context",
                        "in": "query",
                        "description": "context can be OPERATOR, PROVIDER or TENANT",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The request body to create organization OAuth Application.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrgOauthAppRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClientCredentials"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - The request is either incomplete or incorrect"
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API"
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Organization Managed OAuth Apps"
                ],
                "summary": "Delete Organization Managed OAuth Apps",
                "description": "Removes the specified oAuth Apps from a specified Provider organization. OAuth Apps are specified via Client ID.",
                "operationId": "deleteOauthAppsByOrganizationId",
                "requestBody": {
                    "description": "The Oauth apps to be deleted from Provider organization",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteOrgOauthAppRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PartialSuccessResponseString"
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "name": "orgId",
                    "in": "path",
                    "description": "Unique identifier (GUID) of the Provider organization.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/v2/orgs/{orgId}/oauth-apps/{oauthAppId}/secret": {
            "put": {
                "tags": [
                    "Organization Managed OAuth Apps"
                ],
                "summary": "Regenerate OAuth App Secret",
                "description": "Immediately replaces an old OAuth App’s secret with a new secret. Secret expiration time does not apply.",
                "operationId": "updateOrganizationOAuthApplicationSecretByOrgnizationIdAndApplicationId",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClientCredentials"
                                },
                                "examples": {
                                    "example-1": {
                                        "value": {
                                            "clientSecret": "...",
                                            "clientId": "..."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - The request is either incomplete or incorrect"
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API"
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation"
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request"
                    }
                }
            },
            "post": {
                "tags": [
                    "Organization Managed OAuth Apps"
                ],
                "summary": "Owner Secret Rotation",
                "description": "Sets new secret for a specified OAuth App. The previous client secret lasts for a period of time defined in the body of the request.",
                "operationId": "setNewClientSecretByOrganizationIdAndApplicationId",
                "requestBody": {
                    "description": "Sets new secret for a specified OAuth App",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrgOauthAppNewSecretRequest"
                            },
                            "examples": {
                                "example-1": {
                                    "value": {
                                        "newClientSecret": "string",
                                        "secretExpirationTimeInSeconds": 1
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request - The request is either incomplete or incorrect"
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API"
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation"
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Organization Managed OAuth Apps"
                ],
                "summary": "Delete Old OAuth App Secret",
                "description": "Deletes a specified OAuth App’s old secret.",
                "operationId": "deleteOldSecretByOrganizationIdAndOAuthAppId",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API"
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation"
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request"
                    }
                }
            },
            "parameters": [
                {
                    "name": "orgId",
                    "in": "path",
                    "description": "Unique identifier (GUID) of the Provider organization.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "oauthAppId",
                    "in": "path",
                    "description": "The unique identifier of the OAuth Application.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/v2/clients/{clientId}/secret": {
            "post": {
                "tags": [
                    "Organization Managed OAuth Apps Client"
                ],
                "summary": "Client Secret Rotation",
                "description": "Rotates an OAuth App client’s secret. This operation does not work if during the app creation ownerOnlySecretRotation is set to true.",
                "operationId": "updateClientSecret",
                "parameters": [
                    {
                        "name": "authorization",
                        "in": "header",
                        "description": "Basic auth with client credentials [Basic Base64_Encode(client_id:client_secret)]",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request body to rotate an OAuth App client’s secret",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrgOauthAppNewSecretRequest"
                            },
                            "examples": {
                                "example-1": {
                                    "value": {
                                        "newClientSecret": "string",
                                        "secretExpirationTimeInSeconds": 1
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request - The request is either incomplete or incorrect"
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API"
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation"
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Organization Managed OAuth Apps Client"
                ],
                "summary": "Delete Old OAuth App Secret",
                "description": "Deletes a specified Oauth App’s old secret. Specification is done via Client ID and Client Secret.",
                "operationId": "deleteClientOldSecret",
                "parameters": [
                    {
                        "name": "authorization",
                        "in": "header",
                        "description": "Basic auth with client credentials [Basic Base64_Encode(client_id:client_secret)]",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API"
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation"
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request"
                    }
                }
            },
            "parameters": [
                {
                    "name": "clientId",
                    "in": "path",
                    "description": "The unique identifier of the client.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/v2/orgs/{orgId}/oauth-apps/{oauthAppId}": {
            "get": {
                "tags": [
                    "Organization Managed OAuth Apps"
                ],
                "summary": "Get Organization Managed OAuth App",
                "description": "Retrieves information about a specified OAuth App within a Provider organization.",
                "operationId": "getOrganizationOAuthApplicationByOrganizationIdAndApplicationId",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CpnOrgOauthAppResponse"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Organization Managed OAuth Apps"
                ],
                "summary": "Update Organization Managed OAuth App",
                "description": "Updates the details and settings of an OAuth App that was created in a specified Provider organization.",
                "operationId": "updateOrganizationOAuthApplicationByOrganizationIdAndApplicationId",
                "parameters": [
                    {
                        "name": "context",
                        "in": "query",
                        "description": "context can be PROVIDER, TENANT",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The request body to update organization OAuth Application.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CpnOrgOauthAppUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CpnOrgOauthAppResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - The request is either incomplete or incorrect"
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API"
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation"
                    }
                }
            },
            "parameters": [
                {
                    "name": "orgId",
                    "in": "path",
                    "description": "Unique identifier (GUID) of the Provider organization.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "oauthAppId",
                    "in": "path",
                    "description": "The unique identifier of the OAuth Application (client).",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/v2/orgs/{orgId}/oauth-apps/scopes": {
            "get": {
                "tags": [
                    "Organization Managed OAuth Apps"
                ],
                "summary": "Get allowed OAuth role-based scopes",
                "description": "Retrieves details about the allowed OAuth role-based scopes of a specified Provider organization.",
                "operationId": "getAllowedOauthRoleBasedScopesOfOrganization",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAllowedScopes"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API"
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation"
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request"
                    }
                }
            },
            "parameters": [
                {
                    "name": "orgId",
                    "in": "path",
                    "description": "Unique identifier (GUID) of the Provider organization.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/v2/authn/authorize": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Get Token for Oauth App",
                "description": "Get access token for OAuth app in a Provider organization.",
                "operationId": "post-authn-authorize",
                "parameters": [
                    {
                        "name": "authorization",
                        "in": "header",
                        "description": "Basic auth with client credentials [Basic Base64_Encode(client_id:client_secret)]",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orgId",
                        "in": "query",
                        "description": "Unique identifier (GUID) of the Provider organization.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accessTokenValiditySeconds",
                        "in": "query",
                        "description": "The validity in seconds for the access token",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The application/x-www-form-urlencoded form data type.",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {}
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationTokens"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - The request is either incomplete or incorrect"
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API"
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation"
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request"
                    }
                }
            },
            "parameters": []
        },
        "/v2/orgs/{orgId}/clients/{clientId}": {
            "get": {
                "tags": [
                    "Organization Managed OAuth Apps Client"
                ],
                "summary": "GET Oauth App Client",
                "description": "Retrieves details about a specified OAuth client which has been assigned roles, in a given Provider organization.",
                "operationId": "getOauthClient",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CpnOrgOauthAppClient"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation"
                    },
                    "404": {
                        "description": "Not Found - The requested resource does not exist"
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request"
                    }
                }
            },
            "parameters": [
                {
                    "name": "orgId",
                    "in": "path",
                    "description": "Unique identifier (GUID) of the Provider organization.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "clientId",
                    "in": "path",
                    "description": "Unique identifier of the client.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/v2/orgs/{orgId}/clients": {
            "get": {
                "tags": [
                    "Organization Managed OAuth Apps Client"
                ],
                "summary": "Get Oauth App Clients",
                "description": "Get the Oauth App clients in the given Provider organization.\nThese are the oauth apps which have been assigned roles in the given organization.",
                "operationId": "getOrganizationClients",
                "parameters": [
                    {
                        "name": "pageStart",
                        "in": "query",
                        "description": "Start index of records to fetch. Defaults to 1",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageLimit",
                        "in": "query",
                        "description": "Maximum number of Apps to return in response. Defaults to 200.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "A search term to be used to filter clients by either display name or client id.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagedResponseCpnOauthAppClients"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "object",
                                    "properties": {}
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation"
                    },
                    "404": {
                        "description": "Not Found - The requested resource does not exist"
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request"
                    }
                }
            },
            "post": {
                "tags": [
                    "Organization Managed OAuth Apps Client"
                ],
                "summary": "Assigns roles to the specified OAuth client",
                "description": "Assigns roles to the specified OAuth client in a given Provider organization.",
                "operationId": "assignRolesToOauthClient",
                "parameters": [
                    {
                        "name": "context",
                        "in": "query",
                        "description": "context can be PROVIDER or TENANT",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Defines the request body to assign roles to the specified OAuth client",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignRolesRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailureResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - The request is either incomplete or incorrect"
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API"
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation"
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Organization Managed OAuth Apps Client"
                ],
                "summary": "Remove OAuth clients",
                "description": "Removes all OAuth clients from a specified Provider organization.",
                "operationId": "deleteOauthClients",
                "requestBody": {
                    "description": "The request body specifies the identifiers of the OAuth clients to delete",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OAuthClientRequest"
                            },
                            "examples": {
                                "example-1": {
                                    "value": {
                                        "ids": [
                                            "string"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PartialSuccessResponseString"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - The request is either incomplete or incorrect"
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API"
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation"
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request"
                    }
                }
            },
            "parameters": [
                {
                    "name": "orgId",
                    "in": "path",
                    "description": "Unique identifier (GUID) of the Provider organization.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/v2/orgs/{orgId}/max-oauth-apps": {
            "get": {
                "tags": [
                    "Organization Managed OAuth Apps"
                ],
                "summary": "Get Org's Max OAuth Apps",
                "description": "Get the maximum number of OAuth Apps allowed for current Provider Org. The default number of OAuth Apps allowed for an Org is 200 unless it has Service Owner role, in such a case the allowed number of OAuth Apps will be unlimited (the returned value will be 1,000,000)",
                "operationId": "getOrgsMaxOauthApps",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MaxOAuthApps"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API"
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation"
                    },
                    "404": {
                        "description": "Not Found - The requested resource does not exist"
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Organization Managed OAuth Apps"
                ],
                "summary": "Update Org's Max OAuth App",
                "description": "Updates a Provider organization’s maximum allowed number of OAuth apps. The entered value must be a positive number between 1 and 1000000.",
                "operationId": "updateOrganizationMaxOAuthApps",
                "requestBody": {
                    "description": "Request body to update a Provider organization’s maximum allowed number of OAuth apps.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MaxOAuthApps"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MaxOAuthApps"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API"
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation"
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request"
                    }
                }
            },
            "parameters": [
                {
                    "name": "orgId",
                    "in": "path",
                    "description": "Unique identifier (GUID) of the Provider organization.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/v2/clients/{clientId}/orgs/{orgId}/roles": {
            "patch": {
                "tags": [
                    "Organization Managed OAuth Apps Client"
                ],
                "summary": "Updates the organization and service roles of an OAuth client",
                "description": "Updates the organization and service roles of an OAuth client in a specified Provider organization.",
                "operationId": "updateOrganizationAndServiceRolesOfOauthClient",
                "parameters": [
                    {
                        "name": "context",
                        "in": "query",
                        "description": "PROVIDER, TENANT",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request body to update the organization and service roles of an OAuth client",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateRolesRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request - The request is either incomplete or incorrect - The request is either incomplete or incorrect"
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API"
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation"
                    },
                    "404": {
                        "description": "Not Found - The requested resource does not exist"
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request"
                    }
                }
            },
            "parameters": [
                {
                    "name": "clientId",
                    "in": "path",
                    "description": "The unique identifier of the client.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "orgId",
                    "in": "path",
                    "description": "Unique identifier (GUID) of the Provider organization.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/v2/clients/{clientId}/orgs/{orgId}/org-roles/{roleId}/org-bindings": {
            "get": {
                "tags": [
                    "Organization Managed OAuth Apps Client"
                ],
                "summary": "Get organization bindings of a specified client, organization and role ID",
                "description": "Retreives details about the organization bindings of a specified client, Provider organization and role ID.",
                "operationId": "getOrganizationBindingsOfClientOrganizationAndRoleId",
                "parameters": [
                    {
                        "name": "context",
                        "in": "query",
                        "description": "context can be OPERATOR, PROVIDER or TENANT.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrgForAuth"
                                    }
                                },
                                "examples": {
                                    "example-1": {
                                        "value": [
                                            {
                                                "realm": "CPHUB",
                                                "inactive": true,
                                                "orgId": "string",
                                                "natures": [
                                                    "ALL_NATURE"
                                                ],
                                                "parentOrgId": "string",
                                                "orgType": "OPERATOR",
                                                "updateTimestamp": 12345,
                                                "createTimestamp": 12345
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - The request is either incomplete or incorrect - The request is either incomplete or incorrect"
                    },
                    "401": {
                        "description": "Unauthorized - The user is not authorized to use the API"
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission for this operation"
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request"
                    }
                }
            },
            "parameters": [
                {
                    "name": "clientId",
                    "in": "path",
                    "description": "Unique identifier of the client.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "orgId",
                    "in": "path",
                    "description": "Unique identifier (GUID) of the Provider organization.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "roleId",
                    "in": "path",
                    "description": "Unique identifier of the role.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/v1/orgs/{orgId}/users/assign-missing-vcp-vui-service-roles": {
            "post": {
                "tags": [
                    "Service Organization"
                ],
                "summary": "Assigns the Service Manager role to a Provider Billing User",
                "description": "Assigns the Service Manager role to a Provider Billing User with Commerce Portal and vCloud Usage Insight default roles.",
                "operationId": "post-orgs-orgId-users-assign-missing-vcp-vui-service-roles",
                "requestBody": {
                    "description": "List of usernames having provider billing user role.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Users"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Users"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - The request is either incomplete or incorrect - The request is either incomplete or incorrect"
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error has occurred while processing the request"
                    }
                }
            },
            "parameters": [
                {
                    "name": "orgId",
                    "in": "path",
                    "description": "Unique identifier (GUID) of the Provider organization.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        }
    },
    "components": {
        "schemas": {
            "AddUserGenericResponse": {
                "title": "AddUserGenericResponse",
                "type": "object",
                "properties": {
                    "succeeded": {
                        "$ref": "#/components/schemas/AddInviteUserSucceeded"
                    },
                    "failed": {
                        "$ref": "#/components/schemas/AddInviteUserFailed"
                    }
                },
                "description": "Defines the properties of Add User Generic Response.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ErrorResponse"
                    }
                ]
            },
            "AddUserRequest": {
                "title": "AddUserRequest",
                "type": "object",
                "properties": {
                    "users": {
                        "type": "array",
                        "description": "Defines the list of users",
                        "items": {
                            "$ref": "#/components/schemas/ExtendedUsername"
                        }
                    },
                    "serviceRolesItems": {
                        "type": "array",
                        "description": "The list of service role objects",
                        "items": {
                            "$ref": "#/components/schemas/ServiceRolesItemForNewUser"
                        }
                    },
                    "orgRolesToAdd": {
                        "type": "array",
                        "description": "The organization roles roles to add",
                        "items": {
                            "type": "string"
                        }
                    },
                    "orgRoleBindingOrgs": {
                        "type": "array",
                        "description": "The organization role binding orgs",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Request body to add user to organization.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseEntity"
                    }
                ]
            },
            "AssignGroupsToOrgAuthRequest": {
                "title": "AssignGroupsToOrgAuthRequest",
                "type": "object",
                "properties": {
                    "orgRoleBindingOrgs": {
                        "type": "array",
                        "description": "List of the organization role bindings orgs.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ids": {
                        "type": "array",
                        "description": "IDs of the groups to whom the roles will be assigned.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "failures": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Set of error details for each group whose roles failed to be updated."
                    },
                    "orgRoleItems": {
                        "$ref": "#/components/schemas/OrgRoleItems"
                    },
                    "serviceRolesItems": {
                        "$ref": "#/components/schemas/ServiceRolesItems"
                    },
                    "notifyUsersInGroups": {
                        "type": "boolean",
                        "description": "Publish email notification to group members."
                    }
                },
                "description": "Assign groups to org request.",
                "example": {
                    "orgRoleBindingOrgs": [
                        "...",
                        "..."
                    ],
                    "ids": [
                        "...",
                        "..."
                    ],
                    "failures": {
                        "property1": {},
                        "property2": {}
                    },
                    "orgRoleItems": {
                        "roleNamesToRemove": [
                            "...",
                            "..."
                        ],
                        "roleNamesToAdd": [
                            "...",
                            "..."
                        ]
                    },
                    "serviceRolesItems": {
                        "serviceRolesItems": [
                            {
                                "rolesToAdd": [
                                    {},
                                    {}
                                ],
                                "serviceId": "...",
                                "roleNamesToAdd": [
                                    "...",
                                    "..."
                                ],
                                "serviceType": "external",
                                "rolesToRemove": [
                                    {},
                                    {}
                                ],
                                "roleNamesToRemove": [
                                    "...",
                                    "..."
                                ]
                            },
                            {
                                "rolesToAdd": [
                                    {},
                                    {}
                                ],
                                "serviceId": "...",
                                "roleNamesToAdd": [
                                    "...",
                                    "..."
                                ],
                                "serviceType": "external",
                                "rolesToRemove": [
                                    {},
                                    {}
                                ],
                                "roleNamesToRemove": [
                                    "...",
                                    "..."
                                ]
                            }
                        ]
                    },
                    "notifyUsersInGroups": true
                }
            },
            "AuthenticationTokens": {
                "title": "AuthenticationTokens",
                "type": "object",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "The access token. This is a JWT token that grants access to resources."
                    },
                    "idToken": {
                        "type": "string",
                        "description": "The ID Token is a signed JWT token returned from the authorization server and contains the user's profile information, including the domain of the identity provider. This domain is used to obtain the identity provider URL. This token is used for optimization so the application can know the identity of the user, without having to make any additional network requests. This token can be generated via the Authorization Code flow only."
                    },
                    "refreshToken": {
                        "type": "string",
                        "description": "The value of the Refresh token."
                    },
                    "returnUrl": {
                        "type": "string",
                        "description": "Defines the return URL here."
                    }
                },
                "description": "The authentication tokens represent the authorization of a specific application to access specific parts of a user's data.",
                "example": {
                    "accessToken": "...",
                    "idToken": "...",
                    "refreshToken": "...",
                    "returnUrl": "..."
                }
            },
            "BaseEntity": {
                "title": "BaseEntity",
                "type": "object",
                "properties": {
                    "updateTimestamp": {
                        "type": "integer",
                        "description": "The timestamp the entity was updated at.",
                        "format": "int64"
                    },
                    "createTimestamp": {
                        "type": "integer",
                        "description": "The timestamp the task was created at.",
                        "format": "int64"
                    }
                },
                "description": "Defines the base properties of the entity.",
                "example": {
                    "updateTimestamp": 12345,
                    "createTimestamp": 12345
                }
            },
            "CallingUser": {
                "title": "CallingUser",
                "type": "object",
                "properties": {
                    "userLevel": {
                        "$ref": "#/components/schemas/OrgType"
                    },
                    "isFederated": {
                        "type": "boolean",
                        "description": "Returns true if user is federated"
                    },
                    "linkedUser": {
                        "$ref": "#/components/schemas/User"
                    },
                    "orgContext": {
                        "type": "string",
                        "description": "The context of the organization"
                    }
                },
                "description": "Defines the properties of Calling User.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/User"
                    }
                ]
            },
            "ClientCredentials": {
                "title": "ClientCredentials",
                "type": "object",
                "properties": {
                    "clientSecret": {
                        "type": "string",
                        "description": "The value of the client secret."
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The unique identifier of the client."
                    }
                },
                "description": "Defines the properties of Clent credentials.",
                "example": {
                    "clientSecret": "...",
                    "clientId": "..."
                }
            },
            "ConfigErrorState": {
                "title": "ConfigErrorState",
                "type": "string",
                "description": "Defines the properties of Config error state.",
                "enum": [
                    "PAYMENT_METHOD_CONFIG_ERROR",
                    "TOS_SIGNATURE_ERROR",
                    "MSP_PROVIDER_ROLE_ASSIGNMENT_ERROR",
                    "MSP_ROLE_PROPAGATION_ERROR",
                    "MSP_TENANT_ROLE_ASSIGNMENT_ERROR",
                    "MSP_SERVICE_UNGATING_ERROR",
                    "AUTH_SVC_NOTIFICATION_ERROR",
                    "MSP_TENANT_FEDERATION_ERROR",
                    "MSP_TENANT_DEACTIVATION_ERROR",
                    "DEACTIVATING_MSP_TENANT"
                ]
            },
            "ConfigResult": {
                "title": "ConfigResult",
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The message related to configuration result."
                    },
                    "state": {
                        "$ref": "#/components/schemas/ConfigErrorState"
                    }
                },
                "description": "Defines the properties of Config result",
                "example": {
                    "message": "...",
                    "state": "MSP_PROVIDER_ROLE_ASSIGNMENT_ERROR"
                }
            },
            "ConfigState": {
                "title": "ConfigState",
                "type": "string",
                "description": "Defines the properties of configuration state",
                "enum": [
                    "SUCCESS",
                    "ERROR",
                    "WARNING"
                ]
            },
            "ConfigurationStatus": {
                "title": "ConfigurationStatus",
                "description": "Defines the properties of the configuration status",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseEntity"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "configResults": {
                                "type": "array",
                                "description": "The list of config results.",
                                "items": {
                                    "$ref": "#/components/schemas/ConfigResult"
                                }
                            },
                            "configState": {
                                "$ref": "#/components/schemas/ConfigState"
                            }
                        },
                        "description": "Defines the properties of the configuration status object"
                    }
                ]
            },
            "Contact": {
                "title": "Contact",
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username of the user."
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address of the user."
                    }
                },
                "description": "Defines the properties of Contact.",
                "example": {
                    "username": "...",
                    "email": "..."
                }
            },
            "DeleteGroupRolesRequest": {
                "title": "DeleteGroupRolesRequest",
                "type": "object",
                "properties": {
                    "ids": {
                        "type": "array",
                        "description": "The client IDs to delete",
                        "items": {
                            "type": "string"
                        }
                    },
                    "notifyUsersInGroups": {
                        "type": "boolean",
                        "description": "Publish email notification to group members."
                    }
                },
                "description": "The request body specifies the identifiers of the groups to delete.",
                "example": {
                    "ids": [
                        "...",
                        "..."
                    ],
                    "notifyUsersInGroups": true
                }
            },
            "ExtendedUsername": {
                "title": "ExtendedUsername",
                "type": "object",
                "properties": {
                    "idpId": {
                        "type": "string",
                        "description": "The user's Identity provider (IdP) ID."
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the user."
                    }
                },
                "description": "Defines the properties of the Extended Username.",
                "example": {
                    "idpId": "...",
                    "username": "..."
                }
            },
            "GetUserInvitation": {
                "title": "GetUserInvitation",
                "description": "Defines the properties of the user organization invitation response.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/InvitationDto"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "username": {
                                "type": "string",
                                "description": "The username of the user."
                            },
                            "orgRoleBindingOrgs": {
                                "type": "array",
                                "description": "List of organization role bindings orgs.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "refLink": {
                                "type": "string",
                                "description": "The reference link to the user profile."
                            },
                            "serviceRoles": {
                                "type": "array",
                                "description": "List of services roles objects.",
                                "items": {
                                    "$ref": "#/components/schemas/ServiceRolesItemForNewUser"
                                }
                            },
                            "orgRoles": {
                                "type": "array",
                                "description": "The list of organization roles.",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Defines properties of get user invitation."
                    }
                ]
            },
            "Group": {
                "title": "Group",
                "required": [
                    "usersCount"
                ],
                "type": "object",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the group."
                    },
                    "usersCount": {
                        "type": "integer",
                        "description": "The Number of users in the group.",
                        "format": "int32"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain name of the group."
                    },
                    "id": {
                        "type": "string",
                        "description": "The Unique identifier of the group."
                    }
                },
                "description": "Defines the properties of the group.",
                "example": {
                    "displayName": "...",
                    "usersCount": 12345,
                    "domain": "...",
                    "id": "..."
                }
            },
            "GroupOrgAndServiceRolesForAuth": {
                "title": "GroupOrgAndServiceRolesForAuth",
                "type": "object",
                "properties": {
                    "serviceRolesList": {
                        "type": "array",
                        "description": "The service roles of the group.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceRoles"
                        }
                    },
                    "orgRoles": {
                        "$ref": "#/components/schemas/OrgRoles"
                    },
                    "group": {
                        "$ref": "#/components/schemas/Group"
                    }
                },
                "description": "The service and organization roles of the group.",
                "x-examples": {
                    "example-1": {
                        "serviceRolesList": [
                            {
                                "resources": [
                                    {
                                        "id": "...",
                                        "name": "..."
                                    },
                                    {
                                        "id": "...",
                                        "name": "..."
                                    }
                                ],
                                "resourceTypes": [
                                    "...",
                                    "..."
                                ],
                                "serviceDisplayName": "...",
                                "serviceId": "...",
                                "roles": [
                                    {
                                        "status": "...",
                                        "mspDefaultRoleOfProviderAtTenant": true,
                                        "displayName": "...",
                                        "hidden": true,
                                        "name": "...",
                                        "roleId": "...",
                                        "enabled": true,
                                        "associatedResources": [
                                            "...",
                                            "..."
                                        ],
                                        "defaultRole": true,
                                        "mspDefaultRole": true,
                                        "resource": "...",
                                        "memberType": "GROUP"
                                    },
                                    {
                                        "status": "...",
                                        "mspDefaultRoleOfProviderAtTenant": true,
                                        "displayName": "...",
                                        "hidden": true,
                                        "name": "...",
                                        "roleId": "...",
                                        "enabled": true,
                                        "associatedResources": [
                                            "...",
                                            "..."
                                        ],
                                        "defaultRole": true,
                                        "mspDefaultRole": true,
                                        "resource": "...",
                                        "memberType": "GROUP"
                                    }
                                ]
                            },
                            {
                                "resources": [
                                    {
                                        "id": "...",
                                        "name": "..."
                                    },
                                    {
                                        "id": "...",
                                        "name": "..."
                                    }
                                ],
                                "resourceTypes": [
                                    "...",
                                    "..."
                                ],
                                "serviceDisplayName": "...",
                                "serviceId": "...",
                                "roles": [
                                    {
                                        "status": "...",
                                        "mspDefaultRoleOfProviderAtTenant": true,
                                        "displayName": "...",
                                        "hidden": true,
                                        "name": "...",
                                        "roleId": "...",
                                        "enabled": true,
                                        "associatedResources": [
                                            "...",
                                            "..."
                                        ],
                                        "defaultRole": true,
                                        "mspDefaultRole": true,
                                        "resource": "...",
                                        "memberType": "GROUP"
                                    },
                                    {
                                        "status": "...",
                                        "mspDefaultRoleOfProviderAtTenant": true,
                                        "displayName": "...",
                                        "hidden": true,
                                        "name": "...",
                                        "roleId": "...",
                                        "enabled": true,
                                        "associatedResources": [
                                            "...",
                                            "..."
                                        ],
                                        "defaultRole": true,
                                        "mspDefaultRole": true,
                                        "resource": "...",
                                        "memberType": "GROUP"
                                    }
                                ]
                            }
                        ],
                        "orgRoles": {
                            "orgRoles": [
                                {
                                    "memberType": "GROUP",
                                    "orgId": "...",
                                    "displayName": "...",
                                    "name": "...",
                                    "id": "..."
                                },
                                {
                                    "memberType": "DIRECT",
                                    "orgId": "...",
                                    "displayName": "...",
                                    "name": "...",
                                    "id": "..."
                                }
                            ]
                        },
                        "group": {
                            "displayName": "...",
                            "usersCount": 12345,
                            "domain": "...",
                            "id": "..."
                        }
                    }
                }
            },
            "InputRefreshToken": {
                "title": "InputRefreshToken",
                "type": "object",
                "properties": {
                    "refreshToken": {
                        "type": "string",
                        "description": "The value of the refresh token."
                    },
                    "passcode": {
                        "type": "string",
                        "description": "The multi-factor authentication passcode from the registered multi-factor authentication (MFA) device."
                    }
                },
                "description": "The request body for InputRefreshToken.",
                "example": {
                    "refreshToken": "...",
                    "passcode": "..."
                }
            },
            "InvitationDto": {
                "title": "InvitationDto",
                "type": "object",
                "properties": {
                    "generatedBy": {
                        "type": "string",
                        "description": "The Creator ot the invitation (usually client identifier)."
                    },
                    "revokedAt": {
                        "type": "integer",
                        "description": "The revoke timestamp in milliseconds.",
                        "format": "int64"
                    },
                    "status": {
                        "$ref": "#/components/schemas/InvitationStatus"
                    },
                    "revokedBy": {
                        "type": "string",
                        "description": "The name of invitation revoker."
                    },
                    "expirationTime": {
                        "type": "integer",
                        "description": "The expiration time of the invitation.",
                        "format": "int64"
                    },
                    "redeemedAt": {
                        "type": "integer",
                        "description": "The redemption timestamp in milliseconds.",
                        "format": "int64"
                    },
                    "redeemedBy": {
                        "type": "string",
                        "description": "The name of the invitation redeemer."
                    },
                    "generatedAt": {
                        "type": "integer",
                        "description": "The creation timestamp in milliseconds.",
                        "format": "int64"
                    }
                },
                "description": "Defines the properties of the user invitation.",
                "example": {
                    "generatedBy": "...",
                    "revokedAt": 12345,
                    "status": "AVAILABLE",
                    "revokedBy": "...",
                    "expirationTime": 12345,
                    "redeemedAt": 12345,
                    "redeemedBy": "...",
                    "generatedAt": 12345
                }
            },
            "InvitationStatus": {
                "title": "InvitationStatus",
                "type": "string",
                "description": "The status of the invitation.",
                "enum": [
                    "AVAILABLE",
                    "REDEEMED",
                    "REVOKED"
                ]
            },
            "LoggedInUser": {
                "title": "LoggedInUser",
                "type": "object",
                "properties": {
                    "permissions": {
                        "type": "array",
                        "description": "The list of permissions of the calling user",
                        "items": {
                            "type": "string"
                        }
                    },
                    "idToken": {
                        "type": "string",
                        "description": "The ID Token is a signed JWT token returned from the authorization server and contains the user profile information, including the domain of the identity provider. This domain is used to obtain the identity provider URL. This token is used for optimization so the application can know the identity of the user, without having to make any additional network requests."
                    },
                    "accessToken": {
                        "type": "string",
                        "description": "The value of the access token"
                    },
                    "roles": {
                        "type": "array",
                        "description": "The list of roles assigned to user",
                        "items": {
                            "type": "string"
                        }
                    },
                    "cspRoles": {
                        "type": "array",
                        "description": "The list of CSP roles assigned to user",
                        "items": {
                            "type": "string"
                        }
                    },
                    "showOptionForUISwitch": {
                        "type": "boolean",
                        "description": "Indicates if showOptionForUISwitch true or not"
                    },
                    "org": {
                        "$ref": "#/components/schemas/Org"
                    },
                    "isNewUIPreferred": {
                        "type": "boolean",
                        "description": "Indicates if isNewUIPreferred true or not"
                    },
                    "vuiAccessToken": {
                        "type": "string",
                        "description": "The value of the VUI access token"
                    },
                    "roleVersion": {
                        "type": "string",
                        "description": "The roles version of the organization"
                    },
                    "userInvitationOrgs": {
                        "type": "array",
                        "description": "Defines the list of user invitation orgs",
                        "items": {
                            "type": "string"
                        }
                    },
                    "orgContextType": {
                        "$ref": "#/components/schemas/OrgContextType"
                    },
                    "userSource": {
                        "$ref": "#/components/schemas/UserSource"
                    }
                },
                "description": "Defines the properties of Logged in user object.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CallingUser"
                    }
                ]
            },
            "LoggedInUserOrgsDto": {
                "title": "LoggedInUserOrgsDto",
                "type": "object",
                "properties": {
                    "loggedInUserOrgs": {
                        "type": "array",
                        "description": "List of logged in user orgs.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Define properties of logged in user organizations.",
                "example": {
                    "loggedInUserOrgs": [
                        "...",
                        "..."
                    ]
                }
            },
            "MemberType": {
                "title": "MemberType",
                "type": "string",
                "description": "Membership type of the member in the organization. DIRECT: if the member roles were assigned directly. GROUP: if the member roles were assigned through custom or enterprise group.",
                "enum": [
                    "DIRECT",
                    "GROUP"
                ]
            },
            "Org": {
                "title": "Org",
                "description": "Defines the properties of Organization.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseEntity"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "status": {
                                "$ref": "#/components/schemas/Status_Org"
                            },
                            "country": {
                                "type": "string",
                                "description": "The country of the organization."
                            },
                            "name": {
                                "type": "string",
                                "description": "The name of the organization."
                            },
                            "metaData": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "description": "The metadata related to the organization."
                            },
                            "createdByUserId": {
                                "type": "string",
                                "description": "The user who created the organization."
                            },
                            "zip": {
                                "type": "string",
                                "description": "The ZIP code of the organization."
                            },
                            "spPrmId": {
                                "type": "string",
                                "description": "The spPrmId of the organization."
                            },
                            "natures": {
                                "type": "array",
                                "description": "The nature of the Organization.",
                                "items": {
                                    "$ref": "#/components/schemas/OrgNature"
                                }
                            },
                            "isFederated": {
                                "type": "boolean",
                                "description": "Indicates if the organization is federated."
                            },
                            "realm": {
                                "$ref": "#/components/schemas/OrgRealm"
                            },
                            "id": {
                                "type": "string",
                                "description": "Unique identifier (GUID) of the organization."
                            },
                            "tenantType": {
                                "$ref": "#/components/schemas/TenantType"
                            },
                            "providerStatus": {
                                "$ref": "#/components/schemas/ProviderStatus"
                            },
                            "addressLine2": {
                                "type": "string",
                                "description": "The address of the organization."
                            },
                            "primaryContact": {
                                "$ref": "#/components/schemas/Contact"
                            },
                            "adminUserName": {
                                "type": "string",
                                "description": "The username of the admin."
                            },
                            "state": {
                                "type": "string",
                                "description": "The state of the organization."
                            },
                            "alternatePrimaryContact": {
                                "$ref": "#/components/schemas/Contact"
                            },
                            "optOut": {
                                "type": "boolean",
                                "description": "Indicates if optOut flag true."
                            },
                            "providerType": {
                                "$ref": "#/components/schemas/ProviderType"
                            },
                            "aggregateContractIds": {
                                "type": "array",
                                "description": "The List of aggregate contract ids.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "updatedByUserId": {
                                "type": "string",
                                "description": "The user who updated the Organization."
                            },
                            "childOrgIds": {
                                "type": "array",
                                "description": "The List of children organizations.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "addressLine1": {
                                "type": "string",
                                "description": "The address of the organization."
                            },
                            "configStatus": {
                                "$ref": "#/components/schemas/ConfigurationStatus"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the organizaion."
                            },
                            "companyName": {
                                "type": "string",
                                "description": "The company name of the organization."
                            },
                            "partnerTypes": {
                                "type": "array",
                                "description": "The Partner type related to the organization.",
                                "items": {
                                    "$ref": "#/components/schemas/PartnerType"
                                }
                            },
                            "displayName": {
                                "type": "string",
                                "description": "The display name of the organization."
                            },
                            "city": {
                                "type": "string",
                                "description": "The city related to the organization."
                            },
                            "domain": {
                                "type": "string",
                                "description": "The domain of the organization."
                            },
                            "seller": {
                                "$ref": "#/components/schemas/Seller"
                            },
                            "additionalMasterOrgIds": {
                                "type": "array",
                                "description": "List of additional master organization ids.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "parentOrgId": {
                                "type": "string",
                                "description": "The parent organization id of the organization."
                            },
                            "adminUserEmail": {
                                "type": "string",
                                "description": "The admin user email address."
                            },
                            "tag": {
                                "type": "string",
                                "description": "The tag of the organization."
                            },
                            "orgType": {
                                "$ref": "#/components/schemas/OrgType"
                            }
                        },
                        "description": "The properties of Org object"
                    }
                ]
            },
            "OrgAndServiceRolesForAuth": {
                "title": "OrgAndServiceRolesForAuth",
                "type": "object",
                "properties": {
                    "serviceRoles": {
                        "type": "array",
                        "description": "The list of service roles.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceRoles"
                        }
                    },
                    "organizationRoles": {
                        "$ref": "#/components/schemas/OrgRoles"
                    }
                },
                "description": "Defines the properties of the organization and service roles.",
                "x-examples": {
                    "example-1": {
                        "serviceRoles": [
                            {
                                "resources": [
                                    {
                                        "id": "...",
                                        "name": "..."
                                    },
                                    {
                                        "id": "...",
                                        "name": "..."
                                    }
                                ],
                                "resourceTypes": [
                                    "...",
                                    "..."
                                ],
                                "serviceDisplayName": "...",
                                "serviceId": "...",
                                "roles": [
                                    {
                                        "status": "...",
                                        "mspDefaultRoleOfProviderAtTenant": true,
                                        "displayName": "...",
                                        "hidden": true,
                                        "name": "...",
                                        "roleId": "...",
                                        "enabled": true,
                                        "associatedResources": [
                                            "...",
                                            "..."
                                        ],
                                        "defaultRole": true,
                                        "mspDefaultRole": true,
                                        "resource": "...",
                                        "memberType": "DIRECT"
                                    },
                                    {
                                        "status": "...",
                                        "mspDefaultRoleOfProviderAtTenant": true,
                                        "displayName": "...",
                                        "hidden": true,
                                        "name": "...",
                                        "roleId": "...",
                                        "enabled": true,
                                        "associatedResources": [
                                            "...",
                                            "..."
                                        ],
                                        "defaultRole": true,
                                        "mspDefaultRole": true,
                                        "resource": "...",
                                        "memberType": "DIRECT"
                                    }
                                ]
                            },
                            {
                                "resources": [
                                    {
                                        "id": "...",
                                        "name": "..."
                                    },
                                    {
                                        "id": "...",
                                        "name": "..."
                                    }
                                ],
                                "resourceTypes": [
                                    "...",
                                    "..."
                                ],
                                "serviceDisplayName": "...",
                                "serviceId": "...",
                                "roles": [
                                    {
                                        "status": "...",
                                        "mspDefaultRoleOfProviderAtTenant": true,
                                        "displayName": "...",
                                        "hidden": true,
                                        "name": "...",
                                        "roleId": "...",
                                        "enabled": true,
                                        "associatedResources": [
                                            "...",
                                            "..."
                                        ],
                                        "defaultRole": true,
                                        "mspDefaultRole": true,
                                        "resource": "...",
                                        "memberType": "DIRECT"
                                    },
                                    {
                                        "status": "...",
                                        "mspDefaultRoleOfProviderAtTenant": true,
                                        "displayName": "...",
                                        "hidden": true,
                                        "name": "...",
                                        "roleId": "...",
                                        "enabled": true,
                                        "associatedResources": [
                                            "...",
                                            "..."
                                        ],
                                        "defaultRole": true,
                                        "mspDefaultRole": true,
                                        "resource": "...",
                                        "memberType": "GROUP"
                                    }
                                ]
                            }
                        ],
                        "organizationRoles": {
                            "orgRoles": [
                                {
                                    "memberType": "DIRECT",
                                    "orgId": "...",
                                    "displayName": "...",
                                    "name": "...",
                                    "id": "..."
                                },
                                {
                                    "memberType": "DIRECT",
                                    "orgId": "...",
                                    "displayName": "...",
                                    "name": "...",
                                    "id": "..."
                                }
                            ]
                        }
                    }
                }
            },
            "OrgForAuth": {
                "title": "OrgForAuth",
                "properties": {
                    "realm": {
                        "$ref": "#/components/schemas/OrgRealm"
                    },
                    "inactive": {
                        "type": "boolean",
                        "description": "Indicates if organization is inactive"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The unique identifier of the organization"
                    },
                    "roleVersion": {
                        "type": "string",
                        "description": "The role version of the organization"
                    },
                    "natures": {
                        "type": "array",
                        "description": "The nature of the organization",
                        "items": {
                            "$ref": "#/components/schemas/OrgNature"
                        }
                    },
                    "parentOrgId": {
                        "type": "string",
                        "description": "The parent of the organization"
                    },
                    "orgType": {
                        "$ref": "#/components/schemas/OrgType"
                    }
                },
                "description": "Details related to Organization for Auth",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseEntity"
                    },
                    {
                        "type": "object",
                        "description": "Defines the properties of Organization."
                    }
                ]
            },
            "OrgItems": {
                "title": "OrgItems",
                "type": "object",
                "properties": {
                    "orgsToRemove": {
                        "type": "array",
                        "description": "The organizations to be removed.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "orgsToAdd": {
                        "type": "array",
                        "description": "The organizations to be added.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Defines the properties for the organizations to be updated.",
                "example": {
                    "orgsToRemove": [
                        "...",
                        "..."
                    ],
                    "orgsToAdd": [
                        "...",
                        "..."
                    ]
                }
            },
            "OrgNature": {
                "title": "OrgNature",
                "type": "string",
                "description": "The nature of the Organization.",
                "enum": [
                    "ALL_NATURE",
                    "MSP",
                    "PARTNER",
                    "OPS_STOP",
                    "DISTRIBUTOR"
                ]
            },
            "OrgRealm": {
                "title": "OrgRealm",
                "type": "string",
                "description": "The realm of the organization.",
                "enum": [
                    "CPHUB",
                    "CPATH"
                ]
            },
            "OrgRoleItems": {
                "title": "OrgRoleItems",
                "type": "object",
                "properties": {
                    "roleNamesToRemove": {
                        "type": "array",
                        "description": "The Role names to remove.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "roleNamesToAdd": {
                        "type": "array",
                        "description": "The Role names to add.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Request body to update organization roles.",
                "example": {
                    "roleNamesToRemove": [
                        "...",
                        "..."
                    ],
                    "roleNamesToAdd": [
                        "...",
                        "..."
                    ]
                }
            },
            "OrgRoleItemsV2": {
                "title": "OrgRoleItemsV2",
                "type": "object",
                "properties": {
                    "roleId": {
                        "type": "string",
                        "description": "The unique identifier of the role."
                    },
                    "orgItems": {
                        "$ref": "#/components/schemas/OrgItems"
                    },
                    "orgRoleItems": {
                        "$ref": "#/components/schemas/OrgRoleItems"
                    }
                },
                "description": "Defines the properties of Organization role items.",
                "example": {
                    "roleId": "...",
                    "orgItems": {
                        "orgsToRemove": [
                            "...",
                            "..."
                        ],
                        "orgsToAdd": [
                            "...",
                            "..."
                        ]
                    },
                    "orgRoleItems": {
                        "roleNamesToRemove": [
                            "...",
                            "..."
                        ],
                        "roleNamesToAdd": [
                            "...",
                            "..."
                        ]
                    }
                }
            },
            "OrgRoles": {
                "title": "OrgRoles",
                "type": "object",
                "properties": {
                    "orgRoles": {
                        "type": "array",
                        "description": "The list of organization role objects.",
                        "items": {
                            "$ref": "#/components/schemas/Role"
                        }
                    }
                },
                "description": "The list of organization roles.",
                "example": {
                    "orgRoles": [
                        {
                            "memberType": "DIRECT",
                            "orgId": "...",
                            "displayName": "...",
                            "name": "...",
                            "id": "..."
                        },
                        {
                            "memberType": "DIRECT",
                            "orgId": "...",
                            "displayName": "...",
                            "name": "...",
                            "id": "..."
                        }
                    ]
                }
            },
            "OrgType": {
                "title": "OrgType",
                "type": "string",
                "description": "The type of the organization.",
                "enum": [
                    "OPERATOR",
                    "PROVIDER",
                    "TENANT"
                ]
            },
            "PagedEntityDetails": {
                "title": "PagedEntityDetails",
                "type": "object",
                "properties": {
                    "next": {
                        "type": "integer",
                        "description": "First result on the next page.",
                        "format": "int64"
                    },
                    "current": {
                        "type": "integer",
                        "description": "First result on the current page.",
                        "format": "int64"
                    }
                },
                "description": "Response model of Paged Entity Details",
                "example": {
                    "next": 12345,
                    "results": [
                        {},
                        {}
                    ],
                    "current": 12345
                }
            },
            "PagedResponseGroupOrgAndServiceRolesForAuth": {
                "title": "PagedResponseGroupOrgAndServiceRolesForAuth",
                "description": "Paged response of the API call with total results count.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedEntityDetails"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "groupOrgAndServiceRoles": {
                                "type": "array",
                                "description": "List of group organization and service roles.",
                                "items": {
                                    "$ref": "#/components/schemas/GroupOrgAndServiceRolesForAuth"
                                }
                            },
                            "totalResults": {
                                "type": "integer",
                                "description": "Total number of results if available.",
                                "format": "int32"
                            }
                        },
                        "description": "Partial result of the API call with total results count."
                    }
                ],
                "x-examples": {
                    "Example 1": {
                        "next": 1,
                        "current": 1,
                        "groupOrgAndServiceRoles": [
                            {
                                "serviceRolesList": [
                                    {
                                        "resources": [
                                            {
                                                "id": 3457575,
                                                "name": "Instance1"
                                            },
                                            {
                                                "id": 755885,
                                                "name": "Instance2"
                                            }
                                        ],
                                        "resourceTypes": [],
                                        "serviceDisplayName": "Service A",
                                        "serviceId": "535689432222",
                                        "roles": [
                                            {
                                                "status": "ACTIVE",
                                                "mspDefaultRoleOfProviderAtTenant": true,
                                                "displayName": "Administrator",
                                                "hidden": false,
                                                "name": "admin",
                                                "roleId": "admin",
                                                "enabled": true,
                                                "associatedResources": [],
                                                "defaultRole": true,
                                                "mspDefaultRole": true,
                                                "resource": "admin:Instance1",
                                                "memberType": "GROUP"
                                            },
                                            {
                                                "status": "ACTIVE",
                                                "mspDefaultRoleOfProviderAtTenant": true,
                                                "displayName": "User",
                                                "hidden": "false",
                                                "name": "user",
                                                "roleId": "user",
                                                "enabled": true,
                                                "associatedResources": [],
                                                "defaultRole": true,
                                                "mspDefaultRole": true,
                                                "resource": "user:Instance2",
                                                "memberType": "GROUP"
                                            }
                                        ]
                                    }
                                ],
                                "orgRoles": {
                                    "orgRoles": [
                                        {
                                            "memberType": "GROUP",
                                            "name": "msp:provider_account_admin"
                                        }
                                    ]
                                },
                                "group": {
                                    "displayName": "PAGroup@xyz.com",
                                    "usersCount": 2,
                                    "domain": "xyz.com",
                                    "id": "745678999875435677"
                                }
                            }
                        ],
                        "totalResults": 1
                    }
                }
            },
            "PagedResponseGroups": {
                "title": "PagedResponseGroups",
                "description": "Defines the properties of Paged response of Groups.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedEntityDetails"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "groups": {
                                "type": "array",
                                "description": "The list of groups that are returned.",
                                "items": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            },
                            "totalResults": {
                                "type": "integer",
                                "description": "Total number of results if available.",
                                "format": "int32"
                            }
                        },
                        "description": "Defines the properties of Paged response of Groups"
                    }
                ]
            },
            "PagedResponseUsers": {
                "title": "PagedResponseUsers",
                "description": "Defines the properties of Paged response of users.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedEntityDetails"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "users": {
                                "type": "array",
                                "description": "The list of users returned.",
                                "items": {
                                    "$ref": "#/components/schemas/User"
                                }
                            },
                            "totalResults": {
                                "type": "integer",
                                "description": "Total number of results if available.",
                                "format": "int32"
                            }
                        },
                        "description": "Defines the properties of User objects"
                    }
                ]
            },
            "PartnerType": {
                "title": "PartnerType",
                "type": "string",
                "description": "Defines the Partner type of VMware",
                "enum": [
                    "PARTNER",
                    "RESELLER",
                    "DIRECT_RESELLER"
                ]
            },
            "ProviderStatus": {
                "title": "ProviderStatus",
                "type": "string",
                "description": "Defines the status of the Provider which can be TRIAL or PAID.",
                "enum": [
                    "TRIAL",
                    "PAID"
                ]
            },
            "ProviderType": {
                "title": "ProviderType",
                "type": "string",
                "description": "The type of the Provider.",
                "enum": [
                    "STANDARD",
                    "ADDITIONAL"
                ]
            },
            "Resource": {
                "title": "Resource",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the resouce."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the resource."
                    }
                },
                "description": "The resource in which the role is scoped to.",
                "example": {
                    "id": "...",
                    "name": "..."
                }
            },
            "Role": {
                "title": "Role",
                "type": "object",
                "properties": {
                    "memberType": {
                        "$ref": "#/components/schemas/MemberType"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier (GUID) of the organization."
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the role."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the role."
                    },
                    "id": {
                        "type": "string",
                        "description": "The Unique identifier of the role."
                    }
                },
                "description": "Defines the properties of the role.",
                "example": {
                    "memberType": "GROUP",
                    "orgId": "...",
                    "displayName": "...",
                    "name": "...",
                    "id": "..."
                }
            },
            "RoleDefinition": {
                "title": "RoleDefinition",
                "description": "Defines the properties of the role definition.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseEntity"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "description": {
                                "type": "string",
                                "description": "The description of the role."
                            },
                            "creatorOrg": {
                                "type": "string",
                                "description": "The creator org related to role definition."
                            },
                            "nature": {
                                "$ref": "#/components/schemas/OrgNature"
                            },
                            "realm": {
                                "$ref": "#/components/schemas/OrgRealm"
                            },
                            "id": {
                                "type": "string",
                                "description": "The unique identifier of the role."
                            },
                            "name": {
                                "type": "string",
                                "description": "The name of the role."
                            },
                            "orgType": {
                                "$ref": "#/components/schemas/OrgType"
                            },
                            "orgPermissions": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "description": "The organization permissions relate to roles."
                            },
                            "roleInheritance": {
                                "$ref": "#/components/schemas/RoleInheritanceType"
                            }
                        }
                    }
                ]
            },
            "RoleDto": {
                "title": "RoleDto",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the role."
                    }
                },
                "description": "Defines the properties of the role.",
                "example": {
                    "name": "..."
                }
            },
            "RoleInheritanceType": {
                "title": "RoleInheritanceType",
                "type": "string",
                "description": "The type of role inheritance.",
                "enum": [
                    "MANUAL",
                    "ALL_DESCENDANTS",
                    "ALL_PROVIDERS"
                ]
            },
            "Seller": {
                "title": "Seller",
                "type": "string",
                "description": "Seller which can have values AWS or VMWARE.",
                "enum": [
                    "VMWARE",
                    "AWS"
                ]
            },
            "ServiceRole": {
                "title": "ServiceRole",
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Defines the status of service role."
                    },
                    "mspDefaultRoleOfProviderAtTenant": {
                        "type": "boolean",
                        "description": "Indicates if msp default role of provider at tenant.",
                        "default": false
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The service role display name."
                    },
                    "hidden": {
                        "type": "boolean",
                        "description": "Indicates if the role is hidden."
                    },
                    "name": {
                        "type": "string",
                        "description": "Indicates the name of the role."
                    },
                    "roleId": {
                        "type": "string",
                        "description": "Unique identifier of the role."
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates if role is enabled."
                    },
                    "associatedResources": {
                        "type": "array",
                        "description": "List of associated resources with role.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "defaultRole": {
                        "type": "boolean",
                        "description": "Indicates if role is default."
                    },
                    "mspDefaultRole": {
                        "type": "boolean",
                        "description": "Indicates if it is msp default role.",
                        "default": false
                    },
                    "resource": {
                        "pattern": "^((?!vrn\\/org:).)*$",
                        "type": "string",
                        "description": "The resource in which the role is scoped to."
                    },
                    "memberType": {
                        "$ref": "#/components/schemas/MemberType"
                    }
                },
                "description": "Defines the properties of service role.",
                "example": {
                    "status": "...",
                    "mspDefaultRoleOfProviderAtTenant": true,
                    "displayName": "...",
                    "hidden": true,
                    "name": "...",
                    "roleId": "...",
                    "enabled": true,
                    "associatedResources": [
                        "...",
                        "..."
                    ],
                    "defaultRole": true,
                    "mspDefaultRole": true,
                    "resource": "...",
                    "memberType": "GROUP"
                }
            },
            "ServiceRoleItem": {
                "title": "ServiceRoleItem",
                "type": "object",
                "properties": {
                    "resource": {
                        "pattern": "^((?!vrn\\/org:).)*$",
                        "type": "string",
                        "description": "The resource in which the role is scoped to. "
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the role."
                    }
                },
                "description": "Defines the properties of the service role.",
                "example": {
                    "resource": "...",
                    "name": "..."
                }
            },
            "ServiceRoles": {
                "title": "ServiceRoles",
                "type": "object",
                "properties": {
                    "resources": {
                        "type": "array",
                        "description": "Defines the  list of resources.",
                        "items": {
                            "$ref": "#/components/schemas/Resource"
                        }
                    },
                    "resourceTypes": {
                        "type": "array",
                        "description": "The list of resource types.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "serviceDisplayName": {
                        "type": "string",
                        "description": "The display name of the service."
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The service definition id (without \"external\" prefix.)"
                    },
                    "roles": {
                        "type": "array",
                        "description": "The list of role objects.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceRole"
                        }
                    }
                },
                "description": "Defines the properties of service roles.",
                "example": {
                    "resources": [
                        {
                            "id": "...",
                            "name": "..."
                        },
                        {
                            "id": "...",
                            "name": "..."
                        }
                    ],
                    "resourceTypes": [
                        "...",
                        "..."
                    ],
                    "serviceDisplayName": "...",
                    "serviceId": "...",
                    "roles": [
                        {
                            "status": "...",
                            "mspDefaultRoleOfProviderAtTenant": true,
                            "displayName": "...",
                            "hidden": true,
                            "name": "...",
                            "roleId": "...",
                            "enabled": true,
                            "associatedResources": [
                                "...",
                                "..."
                            ],
                            "defaultRole": true,
                            "mspDefaultRole": true,
                            "resource": "...",
                            "memberType": "DIRECT"
                        },
                        {
                            "status": "...",
                            "mspDefaultRoleOfProviderAtTenant": true,
                            "displayName": "...",
                            "hidden": true,
                            "name": "...",
                            "roleId": "...",
                            "enabled": true,
                            "associatedResources": [
                                "...",
                                "..."
                            ],
                            "defaultRole": true,
                            "mspDefaultRole": true,
                            "resource": "...",
                            "memberType": "GROUP"
                        }
                    ]
                }
            },
            "ServiceRolesItem": {
                "title": "ServiceRolesItem",
                "type": "object",
                "properties": {
                    "rolesToAdd": {
                        "type": "array",
                        "description": "The list of roles to add.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceRoleItem"
                        }
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The service definition id (without \"external\" prefix.)"
                    },
                    "roleNamesToAdd": {
                        "type": "array",
                        "description": "The role names to add.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "serviceType": {
                        "$ref": "#/components/schemas/ServiceType"
                    },
                    "rolesToRemove": {
                        "type": "array",
                        "description": "The list of roles to remove.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceRoleItem"
                        }
                    },
                    "roleNamesToRemove": {
                        "type": "array",
                        "description": "The role names to remove.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Defines the properties of Service role items.",
                "example": {
                    "rolesToAdd": [
                        {
                            "resource": "...",
                            "name": "..."
                        },
                        {
                            "resource": "...",
                            "name": "..."
                        }
                    ],
                    "serviceId": "...",
                    "roleNamesToAdd": [
                        "...",
                        "..."
                    ],
                    "serviceType": "internal",
                    "rolesToRemove": [
                        {
                            "resource": "...",
                            "name": "..."
                        },
                        {
                            "resource": "...",
                            "name": "..."
                        }
                    ],
                    "roleNamesToRemove": [
                        "...",
                        "..."
                    ]
                }
            },
            "ServiceRolesItemForAuth": {
                "title": "ServiceRolesItemForAuth",
                "type": "object",
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": "The service definition id (without \"external\" prefix.)"
                    },
                    "roleNamesToRemove": {
                        "type": "array",
                        "description": "The service role names to remove",
                        "items": {
                            "type": "string"
                        }
                    },
                    "roleNamesToAdd": {
                        "type": "array",
                        "description": "The service role names to add.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "rolesToAdd": {
                        "type": "array",
                        "description": "The list of service roles to add.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceRoleItem"
                        }
                    },
                    "rolesToRemove": {
                        "type": "array",
                        "description": "The list of service roles to remove.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceRoleItem"
                        }
                    }
                },
                "description": "Defines the properties of the service role items.",
                "example": {
                    "serviceId": "...",
                    "roleNamesToRemove": [
                        "...",
                        "..."
                    ],
                    "roleNamesToAdd": [
                        "...",
                        "..."
                    ]
                }
            },
            "ServiceRolesItemForNewUser": {
                "title": "ServiceRolesItemForNewUser",
                "type": "object",
                "properties": {
                    "rolesToAdd": {
                        "type": "array",
                        "description": "The list of roles to add.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceRoleItem"
                        }
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The service definition id (without \"external\" prefix.)"
                    },
                    "roleNamesToAdd": {
                        "type": "array",
                        "description": "The role names to add",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "The service roles to be added.",
                "example": {
                    "rolesToAdd": [
                        {
                            "resource": "...",
                            "name": "..."
                        },
                        {
                            "resource": "...",
                            "name": "..."
                        }
                    ],
                    "serviceId": "...",
                    "roleNamesToAdd": [
                        "...",
                        "..."
                    ]
                }
            },
            "ServiceRolesItems": {
                "title": "ServiceRolesItems",
                "type": "object",
                "properties": {
                    "serviceRolesItems": {
                        "type": "array",
                        "description": "The list of service role items.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceRolesItem"
                        }
                    }
                },
                "description": "The Service roles to be updated.",
                "example": {
                    "serviceRolesItems": [
                        {
                            "rolesToAdd": [
                                {
                                    "resource": "...",
                                    "name": "..."
                                },
                                {
                                    "resource": "...",
                                    "name": "..."
                                }
                            ],
                            "serviceId": "...",
                            "roleNamesToAdd": [
                                "...",
                                "..."
                            ],
                            "serviceType": "internal",
                            "rolesToRemove": [
                                {
                                    "resource": "...",
                                    "name": "..."
                                },
                                {
                                    "resource": "...",
                                    "name": "..."
                                }
                            ],
                            "roleNamesToRemove": [
                                "...",
                                "..."
                            ]
                        },
                        {
                            "rolesToAdd": [
                                {
                                    "resource": "...",
                                    "name": "..."
                                },
                                {
                                    "resource": "...",
                                    "name": "..."
                                }
                            ],
                            "serviceId": "...",
                            "roleNamesToAdd": [
                                "...",
                                "..."
                            ],
                            "serviceType": "external",
                            "rolesToRemove": [
                                {
                                    "resource": "...",
                                    "name": "..."
                                },
                                {
                                    "resource": "...",
                                    "name": "..."
                                }
                            ],
                            "roleNamesToRemove": [
                                "...",
                                "..."
                            ]
                        }
                    ]
                }
            },
            "ServiceRolesItemsForAuth": {
                "title": "ServiceRolesItemsForAuth",
                "type": "object",
                "properties": {
                    "serviceRolesItems": {
                        "type": "array",
                        "description": "List of Service roles to be updated.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceRolesItemForAuth"
                        }
                    }
                },
                "description": "Service roles to be updated.",
                "example": {
                    "serviceRolesItems": [
                        {
                            "serviceId": "...",
                            "roleNamesToRemove": [
                                "...",
                                "..."
                            ],
                            "roleNamesToAdd": [
                                "...",
                                "..."
                            ]
                        },
                        {
                            "serviceId": "...",
                            "roleNamesToRemove": [
                                "...",
                                "..."
                            ],
                            "roleNamesToAdd": [
                                "...",
                                "..."
                            ]
                        }
                    ]
                }
            },
            "ServiceType": {
                "title": "ServiceType",
                "type": "string",
                "description": "The value of the service type",
                "enum": [
                    "external",
                    "internal"
                ]
            },
            "SourceOrg": {
                "title": "SourceOrg",
                "type": "object",
                "properties": {
                    "shortId": {
                        "type": "string",
                        "description": "Short version of the unique identifier of the organization."
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier (GUID) of the organization."
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the organization."
                    }
                },
                "description": "The source organization of the OAuth Application.",
                "example": {
                    "shortId": "...",
                    "orgId": "...",
                    "displayName": "..."
                }
            },
            "Status_Org": {
                "title": "Status",
                "type": "string",
                "description": "The status of the Organization.",
                "enum": [
                    "ACTIVE",
                    "DISABLED"
                ]
            },
            "TenantType": {
                "title": "TenantType",
                "type": "string",
                "description": "Defines the Tenant type of the organization.",
                "enum": [
                    "INTENRAL",
                    "DEFAULT"
                ]
            },
            "UpdateGroupRolesAuthRequest": {
                "title": "UpdateGroupRolesAuthRequest",
                "type": "object",
                "properties": {
                    "notifyUsersInGroups": {
                        "type": "boolean",
                        "description": "Publish email notification to group members."
                    },
                    "updateRoles": {
                        "type": "array",
                        "description": "The Roles to be updated.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "removeOrgBindings": {
                        "type": "array",
                        "description": "The Organization bindings to be removed.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "serviceRolesItems": {
                        "$ref": "#/components/schemas/ServiceRolesItems"
                    },
                    "addOrgBindings": {
                        "type": "array",
                        "description": "The Organization bindings to be added.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "orgRoleItems": {
                        "$ref": "#/components/schemas/OrgRoleItems"
                    }
                },
                "description": "The group roles to be updated.",
                "example": {
                    "notifyUsersInGroups": true,
                    "updateRoles": [
                        "...",
                        "..."
                    ],
                    "removeOrgBindings": [
                        "...",
                        "..."
                    ],
                    "serviceRolesItems": {
                        "serviceRolesItems": [
                            {
                                "rolesToAdd": [
                                    {},
                                    {}
                                ],
                                "serviceId": "...",
                                "roleNamesToAdd": [
                                    "...",
                                    "..."
                                ],
                                "serviceType": "internal",
                                "rolesToRemove": [
                                    {},
                                    {}
                                ],
                                "roleNamesToRemove": [
                                    "...",
                                    "..."
                                ]
                            },
                            {
                                "rolesToAdd": [
                                    {},
                                    {}
                                ],
                                "serviceId": "...",
                                "roleNamesToAdd": [
                                    "...",
                                    "..."
                                ],
                                "serviceType": "internal",
                                "rolesToRemove": [
                                    {},
                                    {}
                                ],
                                "roleNamesToRemove": [
                                    "...",
                                    "..."
                                ]
                            }
                        ]
                    },
                    "addOrgBindings": [
                        "...",
                        "..."
                    ],
                    "orgRoleItems": {
                        "roleNamesToRemove": [
                            "...",
                            "..."
                        ],
                        "roleNamesToAdd": [
                            "...",
                            "..."
                        ]
                    }
                }
            },
            "User": {
                "title": "User",
                "description": "Defines the properties of User Details.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseEntity"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "company": {
                                "type": "string",
                                "description": "The company of the user."
                            },
                            "domain": {
                                "type": "string",
                                "description": "The domain of the user."
                            },
                            "zipcode": {
                                "type": "string",
                                "description": "The ZIP code of the user."
                            },
                            "internalId": {
                                "type": "string",
                                "description": "The internal id of the user."
                            },
                            "address": {
                                "type": "string",
                                "description": "The address of the user."
                            },
                            "website": {
                                "type": "string",
                                "description": "The web site of the user."
                            },
                            "accessible": {
                                "type": "boolean",
                                "description": "True if accessible or not.",
                                "default": true
                            },
                            "updatedByUserId": {
                                "type": "string",
                                "description": "The id of the user who updated."
                            },
                            "tradeId": {
                                "type": "string",
                                "description": "The trade ID of the user."
                            },
                            "username": {
                                "type": "string",
                                "description": "The username of the user."
                            },
                            "lastName": {
                                "type": "string",
                                "description": "The last name of the user."
                            },
                            "emailVerified": {
                                "type": "string",
                                "description": "True if the user's e-mail address has been verified."
                            },
                            "createdByUserId": {
                                "type": "string",
                                "description": "Created by user ID information."
                            },
                            "idpId": {
                                "type": "string",
                                "description": "The user's Identity provider (IdP) ID."
                            },
                            "state": {
                                "type": "string",
                                "description": "The state of the user."
                            },
                            "country": {
                                "type": "string",
                                "description": "The country of the user."
                            },
                            "eulaInfo": {
                                "type": "string",
                                "description": "The end-user license agreement information."
                            },
                            "email": {
                                "type": "string",
                                "description": "The email address of the user."
                            },
                            "id": {
                                "type": "string",
                                "description": "The unique identifier of the user"
                            },
                            "city": {
                                "type": "string",
                                "description": "The city of the user."
                            },
                            "firstName": {
                                "type": "string",
                                "description": "The first name of the user."
                            },
                            "workPhone": {
                                "type": "string",
                                "description": "The work phone number of the user."
                            },
                            "password": {
                                "type": "string",
                                "description": "The password. Combination of characters, numbers and special symbols that is hard to guess."
                            }
                        },
                        "description": "Defines the properties of User object."
                    }
                ]
            },
            "UserInvitationEmailsDto": {
                "title": "UserInvitationEmailsDto",
                "type": "object",
                "properties": {
                    "emails": {
                        "type": "array",
                        "description": "The list of User invitation emails",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Defines the User invitation emails Dto",
                "example": {
                    "emails": [
                        "...",
                        "..."
                    ]
                }
            },
            "UserOrgAndServiceRolesForAuth": {
                "title": "UserOrgAndServiceRolesForAuth",
                "type": "object",
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "orgRoles": {
                        "$ref": "#/components/schemas/OrgRoles"
                    },
                    "serviceRolesList": {
                        "type": "array",
                        "description": "The list of service roles.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceRoles"
                        }
                    }
                },
                "description": "List of user's organization roles and service roles.",
                "x-examples": {
                    "example-1": {
                        "user": {
                            "company": "...",
                            "domain": "...",
                            "zipcode": "...",
                            "internalId": "...",
                            "address": "...",
                            "website": "...",
                            "accessible": true,
                            "updatedByUserId": "...",
                            "tradeId": "...",
                            "username": "...",
                            "lastName": "...",
                            "emailVerified": "...",
                            "createdByUserId": "...",
                            "idpId": "...",
                            "state": "...",
                            "country": "...",
                            "eulaInfo": "...",
                            "email": "...",
                            "id": "...",
                            "city": "...",
                            "firstName": "...",
                            "workPhone": "...",
                            "password": "...",
                            "updateTimestamp": 12345,
                            "createTimestamp": 12345
                        },
                        "orgRoles": {
                            "orgRoles": [
                                {
                                    "memberType": "GROUP",
                                    "orgId": "...",
                                    "displayName": "...",
                                    "name": "...",
                                    "id": "..."
                                },
                                {
                                    "memberType": "DIRECT",
                                    "orgId": "...",
                                    "displayName": "...",
                                    "name": "...",
                                    "id": "..."
                                }
                            ]
                        },
                        "serviceRolesList": [
                            {
                                "resources": [
                                    {
                                        "id": "...",
                                        "name": "..."
                                    },
                                    {
                                        "id": "...",
                                        "name": "..."
                                    }
                                ],
                                "resourceTypes": [
                                    "...",
                                    "..."
                                ],
                                "serviceDisplayName": "...",
                                "serviceId": "...",
                                "roles": [
                                    {
                                        "status": "...",
                                        "mspDefaultRoleOfProviderAtTenant": true,
                                        "displayName": "...",
                                        "hidden": true,
                                        "name": "...",
                                        "roleId": "...",
                                        "enabled": true,
                                        "associatedResources": [
                                            "...",
                                            "..."
                                        ],
                                        "defaultRole": true,
                                        "mspDefaultRole": true,
                                        "resource": "...",
                                        "memberType": "GROUP"
                                    },
                                    {
                                        "status": "...",
                                        "mspDefaultRoleOfProviderAtTenant": true,
                                        "displayName": "...",
                                        "hidden": true,
                                        "name": "...",
                                        "roleId": "...",
                                        "enabled": true,
                                        "associatedResources": [
                                            "...",
                                            "..."
                                        ],
                                        "defaultRole": true,
                                        "mspDefaultRole": true,
                                        "resource": "...",
                                        "memberType": "DIRECT"
                                    }
                                ]
                            },
                            {
                                "resources": [
                                    {
                                        "id": "...",
                                        "name": "..."
                                    },
                                    {
                                        "id": "...",
                                        "name": "..."
                                    }
                                ],
                                "resourceTypes": [
                                    "...",
                                    "..."
                                ],
                                "serviceDisplayName": "...",
                                "serviceId": "...",
                                "roles": [
                                    {
                                        "status": "...",
                                        "mspDefaultRoleOfProviderAtTenant": true,
                                        "displayName": "...",
                                        "hidden": true,
                                        "name": "...",
                                        "roleId": "...",
                                        "enabled": true,
                                        "associatedResources": [
                                            "...",
                                            "..."
                                        ],
                                        "defaultRole": true,
                                        "mspDefaultRole": true,
                                        "resource": "...",
                                        "memberType": "GROUP"
                                    },
                                    {
                                        "status": "...",
                                        "mspDefaultRoleOfProviderAtTenant": true,
                                        "displayName": "...",
                                        "hidden": true,
                                        "name": "...",
                                        "roleId": "...",
                                        "enabled": true,
                                        "associatedResources": [
                                            "...",
                                            "..."
                                        ],
                                        "defaultRole": true,
                                        "mspDefaultRole": true,
                                        "resource": "...",
                                        "memberType": "DIRECT"
                                    }
                                ]
                            }
                        ]
                    }
                }
            },
            "UserOrgRoleBindingItems": {
                "title": "UserOrgRoleBindingItems",
                "type": "object",
                "properties": {
                    "roles": {
                        "type": "array",
                        "description": "The list of the roles.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "orgsToAdd": {
                        "type": "array",
                        "description": "The organization roles to add.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "users": {
                        "type": "array",
                        "description": "The list of the users.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "orgsToRemove": {
                        "type": "array",
                        "description": "The organization roles to remove.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Request body to update the organization role bindings of multiple users",
                "example": {
                    "roles": [
                        "...",
                        "..."
                    ],
                    "orgsToAdd": [
                        "...",
                        "..."
                    ],
                    "users": [
                        "...",
                        "..."
                    ],
                    "orgsToRemove": [
                        "...",
                        "..."
                    ]
                }
            },
            "UserOrgRoleItemsRemoveV2": {
                "title": "UserOrgRoleItemsRemoveV2",
                "type": "object",
                "properties": {
                    "users": {
                        "type": "array",
                        "description": "The list of user objects.",
                        "items": {
                            "$ref": "#/components/schemas/ExtendedUsername"
                        }
                    },
                    "roleNamesToRemove": {
                        "type": "array",
                        "description": "The role names to remove.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "roleNamesToAdd": {
                        "type": "array",
                        "description": "The role names to add.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "The roles to be updated for users.",
                "example": {
                    "users": [
                        {
                            "idpId": "...",
                            "username": "..."
                        },
                        {
                            "idpId": "...",
                            "username": "..."
                        }
                    ],
                    "roleNamesToRemove": [
                        "...",
                        "..."
                    ],
                    "roleNamesToAdd": [
                        "...",
                        "..."
                    ]
                }
            },
            "UserServiceRolesForAuth": {
                "title": "UserServiceRolesForAuth",
                "type": "object",
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "serviceRoles": {
                        "type": "array",
                        "description": "The list of service role objects.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceRoles"
                        }
                    }
                },
                "description": "Defines the properties of user and service roles.",
                "x-examples": {
                    "example-1": {
                        "user": {
                            "company": "...",
                            "domain": "...",
                            "zipcode": "...",
                            "internalId": "...",
                            "address": "...",
                            "website": "...",
                            "accessible": true,
                            "updatedByUserId": "...",
                            "tradeId": "...",
                            "username": "...",
                            "lastName": "...",
                            "emailVerified": "...",
                            "createdByUserId": "...",
                            "idpId": "...",
                            "state": "...",
                            "country": "...",
                            "eulaInfo": "...",
                            "email": "...",
                            "id": "...",
                            "city": "...",
                            "firstName": "...",
                            "workPhone": "...",
                            "password": "...",
                            "updateTimestamp": 12345,
                            "createTimestamp": 12345
                        },
                        "serviceRoles": [
                            {
                                "resources": [
                                    {
                                        "id": "...",
                                        "name": "..."
                                    },
                                    {
                                        "id": "...",
                                        "name": "..."
                                    }
                                ],
                                "resourceTypes": [
                                    "...",
                                    "..."
                                ],
                                "serviceDisplayName": "...",
                                "serviceId": "...",
                                "roles": [
                                    {
                                        "status": "...",
                                        "mspDefaultRoleOfProviderAtTenant": true,
                                        "displayName": "...",
                                        "hidden": true,
                                        "name": "...",
                                        "roleId": "...",
                                        "enabled": true,
                                        "associatedResources": [
                                            "...",
                                            "..."
                                        ],
                                        "defaultRole": true,
                                        "mspDefaultRole": true,
                                        "resource": "...",
                                        "memberType": "DIRECT"
                                    },
                                    {
                                        "status": "...",
                                        "mspDefaultRoleOfProviderAtTenant": true,
                                        "displayName": "...",
                                        "hidden": true,
                                        "name": "...",
                                        "roleId": "...",
                                        "enabled": true,
                                        "associatedResources": [
                                            "...",
                                            "..."
                                        ],
                                        "defaultRole": true,
                                        "mspDefaultRole": true,
                                        "resource": "...",
                                        "memberType": "GROUP"
                                    }
                                ]
                            },
                            {
                                "resources": [
                                    {
                                        "id": "...",
                                        "name": "..."
                                    },
                                    {
                                        "id": "...",
                                        "name": "..."
                                    }
                                ],
                                "resourceTypes": [
                                    "...",
                                    "..."
                                ],
                                "serviceDisplayName": "...",
                                "serviceId": "...",
                                "roles": [
                                    {
                                        "status": "...",
                                        "mspDefaultRoleOfProviderAtTenant": true,
                                        "displayName": "...",
                                        "hidden": true,
                                        "name": "...",
                                        "roleId": "...",
                                        "enabled": true,
                                        "associatedResources": [
                                            "...",
                                            "..."
                                        ],
                                        "defaultRole": true,
                                        "mspDefaultRole": true,
                                        "resource": "...",
                                        "memberType": "DIRECT"
                                    },
                                    {
                                        "status": "...",
                                        "mspDefaultRoleOfProviderAtTenant": true,
                                        "displayName": "...",
                                        "hidden": true,
                                        "name": "...",
                                        "roleId": "...",
                                        "enabled": true,
                                        "associatedResources": [
                                            "...",
                                            "..."
                                        ],
                                        "defaultRole": true,
                                        "mspDefaultRole": true,
                                        "resource": "...",
                                        "memberType": "GROUP"
                                    }
                                ]
                            }
                        ]
                    }
                }
            },
            "UserServiceRolesItemForAuth": {
                "title": "UserServiceRolesItemForAuth",
                "type": "object",
                "properties": {
                    "users": {
                        "type": "array",
                        "description": "Defines the list of users.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "serviceRolesItems": {
                        "type": "array",
                        "description": "The list of service role objects.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceRolesItemForAuth"
                        }
                    }
                },
                "description": "Defines the properties of users and service roles.",
                "example": {
                    "users": [
                        "...",
                        "..."
                    ],
                    "serviceRolesItems": [
                        {
                            "serviceId": "...",
                            "roleNamesToRemove": [
                                "...",
                                "..."
                            ],
                            "roleNamesToAdd": [
                                "...",
                                "..."
                            ]
                        },
                        {
                            "serviceId": "...",
                            "roleNamesToRemove": [
                                "...",
                                "..."
                            ],
                            "roleNamesToAdd": [
                                "...",
                                "..."
                            ]
                        }
                    ]
                }
            },
            "AddInviteUserSucceeded": {
                "title": "AddInviteUserSucceeded",
                "type": "object",
                "properties": {
                    "added": {
                        "type": "array",
                        "description": "The list of users added.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "invited": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The details of invited users."
                    }
                },
                "description": "Details of Added and Invited users which succeeded."
            },
            "AddInviteUserFailed": {
                "title": "AddInviteUserFailed",
                "type": "object",
                "properties": {
                    "onAdd": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The users for which the add operation failed."
                    },
                    "onInvite": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The users for which the invite operation failed."
                    }
                },
                "description": "Defines the properties for Add and Invited users which failed."
            },
            "PartialSuccessResponse": {
                "title": "PartialSuccessResponse",
                "type": "object",
                "properties": {
                    "failed": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The entities for which the operation failed."
                    },
                    "succeeded": {
                        "type": "array",
                        "description": "The entities for which the operation is successful.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Defines the properties of the partial success response."
            },
            "GenericUserResponse": {
                "title": "GenericUserResponse",
                "type": "object",
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/PartialSuccessResponse"
                    }
                },
                "description": "Defines the Generic user response.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ErrorResponse"
                    }
                ]
            },
            "ErrorResponse": {
                "title": "ErrorResponse",
                "type": "object",
                "properties": {
                    "majorErrorCode": {
                        "type": "string",
                        "description": "The Major error code related to error."
                    },
                    "message": {
                        "type": "string",
                        "description": "The message related to error."
                    },
                    "parameterList": {
                        "type": "array",
                        "description": "The Parameter list related to error.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "minorErrorCode": {
                        "type": "string",
                        "description": "The minor error code related to error."
                    }
                },
                "description": "Defines the properties of Error response."
            },
            "Users": {
                "title": "Users",
                "type": "object",
                "properties": {
                    "users": {
                        "type": "array",
                        "description": "Defines the list of users.",
                        "items": {
                            "$ref": "#/components/schemas/ExtendedUsername"
                        }
                    }
                },
                "description": "The list of user objects defined."
            },
            "OrgOauthAppRequest": {
                "title": "OrgOauthAppRequest",
                "type": "object",
                "properties": {
                    "id": {
                        "maxLength": 256,
                        "minLength": 5,
                        "pattern": "^[A-Za-z0-9-_]+$",
                        "type": "string",
                        "description": "The unique identifier of the OAuth Application."
                    },
                    "displayName": {
                        "maxLength": 100,
                        "minLength": 5,
                        "type": "string",
                        "description": "The organization OAuth Application display name."
                    },
                    "description": {
                        "maxLength": 255,
                        "minLength": 2,
                        "type": "string",
                        "description": "The description of the organization OAuth Application."
                    },
                    "secret": {
                        "pattern": "(?=.{8,})(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+=\\[\\]-{|}',./:;<>?`~]).*",
                        "type": "string",
                        "description": "The organization OAuth Application secret"
                    },
                    "ownerOnlySecretRotation": {
                        "type": "boolean",
                        "description": "When set to ’true’, the client is not allowed to rotate its own secret. "
                    },
                    "accessTokenTTL": {
                        "type": "integer",
                        "description": "The organization OAuth Application access token time to live in seconds.",
                        "format": "int32"
                    },
                    "secretRotationExpirationInSeconds": {
                        "type": "integer",
                        "description": "The secret rotation expiration in seconds. The old OAuth Application secret will expire after it.",
                        "format": "int32"
                    },
                    "allowedScopes": {
                        "$ref": "#/components/schemas/AllowedScopesDto"
                    }
                },
                "description": "The request body to create organization OAuth Application."
            },
            "AllowedScopesDto": {
                "title": "AllowedScopesDto",
                "type": "object",
                "properties": {
                    "generalScopes": {
                        "type": "array",
                        "description": "The General scopes (openid for example).",
                        "items": {
                            "type": "string"
                        }
                    },
                    "organizationScopes": {
                        "$ref": "#/components/schemas/OrganizationScopesDto"
                    },
                    "servicesScopes": {
                        "type": "array",
                        "description": "The service scopes grouped by service definition.",
                        "items": {
                            "$ref": "#/components/schemas/ServiceScopesDto"
                        }
                    }
                },
                "description": "The allowed general, organization and service scopes of access."
            },
            "OrganizationScopesDto": {
                "title": "OrganizationScopesDto",
                "type": "object",
                "properties": {
                    "roles": {
                        "type": "array",
                        "description": "List of allowed roles applicable to the scope",
                        "items": {
                            "$ref": "#/components/schemas/RoleDto"
                        }
                    }
                },
                "description": "The allowed organization scopes of access."
            },
            "ServiceScopesDto": {
                "title": "ServiceScopesDto",
                "required": [
                    "serviceDefinitionId"
                ],
                "type": "object",
                "properties": {
                    "roles": {
                        "type": "array",
                        "description": "List of allowed roles applicable to the scope.",
                        "items": {
                            "$ref": "#/components/schemas/RoleDto"
                        }
                    },
                    "allRoles": {
                        "type": "boolean",
                        "description": "If set to true, the client will be scoped to all available roles."
                    },
                    "serviceDefinitionId": {
                        "type": "string",
                        "description": "Service definition ID (without 'external' prefix)"
                    }
                },
                "description": "Service scopes grouped by service definition.",
                "example": {
                    "roles": [
                        {
                            "resource": "...",
                            "name": "..."
                        },
                        {
                            "resource": "...",
                            "name": "..."
                        }
                    ],
                    "keptInToken": [
                        "PERMISSIONS",
                        "ROLES"
                    ],
                    "permissions": [
                        {
                            "resources": [
                                "...",
                                "..."
                            ],
                            "permissionId": "..."
                        },
                        {
                            "resources": [
                                "...",
                                "..."
                            ],
                            "permissionId": "..."
                        }
                    ],
                    "allRoles": true,
                    "allPermissions": true,
                    "serviceDefinitionId": "...",
                    "roleNames": [
                        "...",
                        "..."
                    ]
                }
            },
            "OrgOauthAppNewSecretRequest": {
                "title": "OrgOauthAppNewSecretRequest",
                "required": [
                    "newClientSecret",
                    "secretExpirationTimeInSeconds"
                ],
                "type": "object",
                "properties": {
                    "newClientSecret": {
                        "type": "string",
                        "description": "The new client secret of OAuth client."
                    },
                    "secretExpirationTimeInSeconds": {
                        "minimum": 0,
                        "exclusiveMinimum": true,
                        "type": "integer",
                        "description": "How much time the previous client secret will last after newClientSecret is set (both will work in that time period, and only the new one after that)."
                    }
                },
                "description": "The request body to set new secret and secret expiration time for the OAuth Application."
            },
            "CpnOrgOauthAppUpdateRequest": {
                "title": "",
                "type": "object",
                "properties": {
                    "displayName": {
                        "maxLength": 100,
                        "minLength": 5,
                        "type": "string",
                        "description": "The organization OAuth Application display name."
                    },
                    "description": {
                        "maxLength": 255,
                        "minLength": 2,
                        "type": "string",
                        "description": "The description of the organization OAuth Application"
                    },
                    "secret": {
                        "pattern": "(?=.{8,})(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+=\\[\\]-{|}',./:;<>?`~]).*",
                        "type": "string",
                        "description": "The organization OAuth Application secret"
                    },
                    "ownerOnlySecretRotation": {
                        "type": "boolean",
                        "description": "When set to ’true’, the client is not allowed to rotate its own secret."
                    },
                    "useCspIssuerUrl": {
                        "type": "boolean"
                    },
                    "accessTokenTTL": {
                        "type": "integer",
                        "description": "The organization OAuth Application access token time to live in seconds.",
                        "format": "int32"
                    },
                    "secretRotationExpirationInSeconds": {
                        "type": "integer",
                        "description": "The secret rotation expiration in seconds. The old OAuth Application secret will expire after it.",
                        "format": "int32"
                    },
                    "allowedScopes": {
                        "$ref": "#/components/schemas/AllowedScopesDto"
                    }
                },
                "description": "The request body to update organization OAuth Application."
            },
            "CpnOrgOauthAppResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the OAuth Application."
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The organization OAuth Application display name."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of organization OAuth Application."
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Timestamp indicating when the organization OAuth Application was created.",
                        "format": "int64"
                    },
                    "lastUpdatedAt": {
                        "type": "integer",
                        "description": "Timestamp indicating when the organization OAuth Application was updated.",
                        "format": "int64"
                    },
                    "accessTokenTTL": {
                        "type": "integer",
                        "description": "The organization OAuth Application access token time to live in seconds.",
                        "format": "int32"
                    },
                    "secretRotationExpirationInSeconds": {
                        "type": "integer",
                        "description": "The secret rotation expiration in seconds. The old OAuth Application secret will expire after it.",
                        "format": "int32"
                    },
                    "ownerOnlySecretRotation": {
                        "type": "boolean",
                        "description": "When set to 'true', the client is not allowed to rotate its own secret.By default, client is enabled to self-rotate its secret"
                    },
                    "useCspIssuerUrl": {
                        "type": "boolean"
                    },
                    "allowedScopes": {
                        "$ref": "#/components/schemas/AllowedScopesDto"
                    },
                    "grantTypes": {
                        "type": "array",
                        "description": "The list of OAuth grant types.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "The organization OAuth Application response."
            },
            "ServiceScopeType": {
                "title": "ServiceScopeType",
                "type": "string",
                "description": "The value of the Service scope type.",
                "enum": [
                    "ALL_SERVICES",
                    "NO_SERVICES"
                ]
            },
            "AllowedScopeDescriptor": {
                "title": "AllowedScopeDescriptor",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the allowed scope."
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates if enabled or not.",
                        "default": true
                    },
                    "incompatibleWith": {
                        "type": "array",
                        "description": "The list of incompatible with related to allowed scopes.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "serviceScopeType": {
                        "$ref": "#/components/schemas/ServiceScopeType"
                    }
                },
                "description": "Defines the properties of the allowed scopes."
            },
            "GetAllowedScopes": {
                "title": "GetAllowedScopes",
                "type": "array",
                "description": "Defines the list of Allowed scopes.",
                "items": {
                    "$ref": "#/components/schemas/AllowedScopeDescriptor"
                }
            },
            "AssignRolesRequest": {
                "title": "AssignRolesRequest",
                "description": "The request body to assign roles.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseOrgRoleDto"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "ids": {
                                "type": "array",
                                "description": "IDs of the members to whom the roles will be assigned.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "serviceRoles": {
                                "type": "array",
                                "description": "The service roles that will be assigned to the members.",
                                "items": {
                                    "$ref": "#/components/schemas/BaseServiceRoleDto"
                                }
                            },
                            "orgRoleBindingOrgs": {
                                "type": "array",
                                "description": "The list of the organization role bindings orgs.",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "The properties of AssignRoles request."
                    }
                ]
            },
            "BaseOrgRoleDto": {
                "title": "BaseRoleDto",
                "type": "object",
                "properties": {
                    "organizationRoles": {
                        "type": "array",
                        "description": "The organization roles that will be assigned to the members.",
                        "items": {
                            "$ref": "#/components/schemas/RoleDto"
                        }
                    }
                },
                "description": "Defines the base properties of the role."
            },
            "BaseServiceRoleDto": {
                "title": "BaseServiceRoleDto",
                "type": "object",
                "properties": {
                    "serviceDefinitionId": {
                        "type": "string",
                        "description": "The unique identifier of service."
                    },
                    "serviceRoles": {
                        "type": "array",
                        "description": "The service roles to be updated.",
                        "items": {
                            "$ref": "#/components/schemas/RoleDto"
                        }
                    }
                },
                "description": "Defines the base properties of the service role."
            },
            "FailureResponse": {
                "title": "FailureResponse",
                "type": "object",
                "properties": {
                    "failures": {
                        "type": "array",
                        "description": "The list of failures related to the operation.",
                        "items": {
                            "$ref": "#/components/schemas/FailureDto"
                        }
                    }
                },
                "description": "Defines the properties of Failure response."
            },
            "FailureDto": {
                "title": "FailureDto",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the entry for which a operation had failed"
                    },
                    "message": {
                        "type": "string",
                        "description": "The reason for which the operation for this entry had failed."
                    }
                },
                "description": "Defines the properties of failure."
            },
            "PagedResponseCpnOrgOauthApps": {
                "title": "PagedResponseCpnOrgOauthApp",
                "description": "Paged response of the API call with total results count.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedEntityDetails"
                    },
                    {
                        "required": [
                            "totalResults"
                        ],
                        "type": "object",
                        "properties": {
                            "results": {
                                "type": "array",
                                "description": "The list of returned results.",
                                "items": {
                                    "$ref": "#/components/schemas/CpnOrgOauthAppResponse"
                                }
                            },
                            "totalResults": {
                                "type": "integer",
                                "description": "Total number of results if available.",
                                "format": "int32",
                                "default": 0
                            }
                        },
                        "description": "Result of CPN Org Oauth apps."
                    }
                ]
            },
            "MaxOAuthApps": {
                "title": "MaxOAuthAppsResponse",
                "type": "object",
                "properties": {
                    "maxOAuthApps": {
                        "type": "integer",
                        "description": "Organization maximum number of OAuth Apps allowed."
                    }
                },
                "description": "Maximum number of OAuth Apps allowed.\n"
            },
            "DeleteOrgOauthAppRequest": {
                "title": "DeleteOrgOauthAppRequest",
                "required": [
                    "clientIdsToDelete"
                ],
                "type": "object",
                "properties": {
                    "clientIdsToDelete": {
                        "minItems": 1,
                        "type": "array",
                        "description": "The client ids to delete. ",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "The request body specifies the identifiers of the OAuth Applications to delete."
            },
            "UpdateRoles": {
                "title": "UpdateRoles",
                "type": "object",
                "properties": {
                    "rolesToAdd": {
                        "type": "array",
                        "description": "The roles to be added.",
                        "items": {
                            "$ref": "#/components/schemas/RoleDto"
                        }
                    },
                    "rolesToRemove": {
                        "type": "array",
                        "description": "The roles to be removed.",
                        "items": {
                            "$ref": "#/components/schemas/RoleDto"
                        }
                    }
                },
                "description": "The roles to be updated."
            },
            "UpdateServiceRoles": {
                "title": "UpdateServiceRoles",
                "description": "Service roles to be updated.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/UpdateRoles"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "serviceDefinitionId": {
                                "type": "string",
                                "description": "The service definition id (without \"external\" prefix.)"
                            }
                        },
                        "description": "Defines the properties which include service definition id."
                    }
                ]
            },
            "UpdateRolesRequest": {
                "title": "UpdateRolesRequest",
                "type": "object",
                "properties": {
                    "organizationRoles": {
                        "$ref": "#/components/schemas/UpdateRoles"
                    },
                    "serviceRoles": {
                        "type": "array",
                        "description": "The list of service roles to be updated.",
                        "items": {
                            "$ref": "#/components/schemas/UpdateServiceRoles"
                        }
                    },
                    "orgRoleBindingOrgs": {
                        "$ref": "#/components/schemas/UpdateOrgBindings"
                    }
                },
                "description": "The Request body to update roles."
            },
            "UpdateOrgBindings": {
                "title": "UpdateOrgBindings",
                "type": "object",
                "properties": {
                    "orgsToAdd": {
                        "type": "array",
                        "description": "The organizations to be added.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "orgsToRemove": {
                        "type": "array",
                        "description": "The organizations to be removed.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Defines the properties to update Organization bindings."
            },
            "CpnOrgOauthAppClient": {
                "title": "CpnOrgOauthAppClient",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the OAuth Application client.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the OAuth Application client."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the OAuth Application client."
                    },
                    "sourceOrg": {
                        "$ref": "#/components/schemas/SourceOrg"
                    },
                    "organizationRoles": {
                        "type": "array",
                        "description": "List of organization role objects.",
                        "items": {
                            "$ref": "#/components/schemas/OauthAppClientRoleItem"
                        }
                    },
                    "serviceRoles": {
                        "type": "array",
                        "description": "List of service role objects.",
                        "items": {
                            "$ref": "#/components/schemas/OauthAppClientServiceRoles"
                        }
                    }
                },
                "description": "Defines the properties of the OAuth Application client."
            },
            "OauthAppClientServiceRoles": {
                "title": "OauthAppServiceRole",
                "type": "object",
                "properties": {
                    "serviceDefinitionId": {
                        "type": "string",
                        "description": "The service definition id (without \"external\" prefix.)"
                    },
                    "serviceRoles": {
                        "type": "array",
                        "description": "List of service role objects.",
                        "items": {
                            "$ref": "#/components/schemas/OauthAppClientRoleItem"
                        }
                    }
                },
                "description": "Defines the properties of Oauth Application service role."
            },
            "PagedResponseCpnOauthAppClients": {
                "title": "",
                "description": "Paged response of the API call with total results count.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedEntityDetails"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "results": {
                                "type": "array",
                                "description": "Partial list of returned results.",
                                "items": {
                                    "$ref": "#/components/schemas/CpnOrgOauthAppClient"
                                }
                            },
                            "totalResults": {
                                "type": "integer",
                                "description": "Total number of results if available."
                            }
                        },
                        "description": "List of CPN Oauth App clients."
                    }
                ]
            },
            "OauthAppClientRoleItem": {
                "title": "OauthAppClientRoleItem",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the oauth app client role."
                    }
                },
                "description": "Defines the properties of Oauth Application Client role."
            },
            "OAuthClientRequest": {
                "title": "OAuthClientRequest",
                "required": [
                    "ids"
                ],
                "type": "object",
                "properties": {
                    "ids": {
                        "minItems": 1,
                        "type": "array",
                        "description": "The list of unique identifiers.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Defines the properties of Oauth Client request.",
                "x-examples": {}
            },
            "PartialSuccessResponseString": {
                "title": "PartialSuccessResponseString",
                "type": "object",
                "properties": {
                    "failed": {
                        "type": "array",
                        "description": "The entities for which the operation failed.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "succeeded": {
                        "type": "array",
                        "description": "The entities for which the operation is successful.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Defines the properties of the partial success response."
            },
            "OrgContextType": {
                "title": "OrgContextType",
                "type": "string",
                "description": "Defines the organization context which can be CSP ,MSP or NO_ORG.",
                "enum": [
                    "MSP",
                    "CSP",
                    "NO_ORG"
                ]
            },
            "UserSource": {
                "title": "UserSource",
                "type": "string",
                "description": "The source of the user.",
                "enum": [
                    "PARTNER_CONNECT",
                    "REGULAR"
                ]
            },
            "DeleteVmcdOauthAppForTenants": {
                "title": "DeleteVmcdOauthAppForTenantsDto",
                "type": "object",
                "properties": {
                    "providerOrgId": {
                        "type": "string"
                    },
                    "deleteVmcdOauthAppForTenant": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeleteVmcdOauthAppTenant"
                        }
                    }
                },
                "description": "Defines the properties of the partial success response."
            },
            "DeleteVmcdOauthAppTenant": {
                "title": "DeleteVmcdOauthAppTenant",
                "type": "object",
                "properties": {
                    "tenantOrgId": {
                        "type": "string"
                    },
                    "partialSuccessResponseString": {
                        "$ref": "#/components/schemas/PartialSuccessResponseString"
                    }
                },
                "description": "Defines the properties of the partial success response."
            }
        },
        "securitySchemes": {
            "csp-auth-token": {
                "type": "apiKey",
                "description": "This can be  the user access token generated from the refresh token that itself can be obtained from the My Account/API tokens tab in the CPN UI or Oauth app access token using client-id/secret.",
                "name": "csp-auth-token",
                "in": "header"
            }
        }
    }
}